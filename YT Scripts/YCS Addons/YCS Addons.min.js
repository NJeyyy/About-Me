// ==UserScript==
// @name             [MINIFIED/COMPILED]YCS optional function
// @namespace        MinifyCompiled__YCS_Addons
// @homepageURL      https://github.com/NJeyyy/About-Me/tree/Userscripts/YT%20Scripts/YCS%20Addons
// @supportURL       https://github.com/NJeyyy/About-Me/blob/Userscripts/YT%20Scripts/YCS%20Addons/Logs.log
// @version          1
// @description      Various optional function for the YCS Extension!
// @author           NJ1n9
// @match            https://www.youtube.com/*
// @icon             https://i.ibb.co/8B51QL5/YCS-Min-Userscript-Icon.png
// @require          https://github.com/NJeyyy/About-Me/raw/dd58f08d979f095a98dfa464d8b0896cbb2528d6/Global%20Tool%20Script/Custom%20Addition%20ToolScript%5BOnly%20the%20script%20list%5D.js
// @grant            GM.setValue
// @grant            GM.getValue
// @noframes
// ==/UserScript==

YCSSTARTER();
async function YCSSTARTER() {
  await sleep(150);
  await waitFor(_ => document.visibilityState == 'visible');
  await waitFor(_ => ISE(".ycs-app"));
  await waitFor(_ => document.getElementById('ycs-input-search'));
  let YIS = document.getElementById('ycs-input-search');
  YIS.setAttribute("type", "search");
  if (document.querySelector("div.YCS-optional-function-CONTAINER") || document.querySelector("style.YCS-optional-function-CONTAINER")) {
    if (document.querySelector("div.YCS-optional-function-CONTAINER")) {
      while (document.querySelector("div.YCS-optional-function-CONTAINER")) {
        document.querySelector("div.YCS-optional-function-CONTAINER").remove()
      }
    }
    if (document.querySelector("style.YCS-optional-function-CONTAINER")) {
      while (document.querySelector("style.YCS-optional-function-CONTAINER")) {
        document.querySelector("style.YCS-optional-function-CONTAINER").remove()
      }
    }
  }
  if (ISE("#YCS_SearchTextPreview")) {
    while (ISE("#YCS_SearchTextPreview")) {
      ISE("#YCS_SearchTextPreview").remove()
    }
  }
  await sleep(90);
  if (window.location.href.match("www.youtube.com\/watch*")) {
    document.addEventListener('keyup', doc_keyUp, false);
    document.getElementById("ycs-input-search").addEventListener('search', SearchValueCLEAR);
    await sleep(70);
    if (!ISE("#YCS_SearchTextPreview")) {
      await waitFor(_ => document.visibilityState == 'visible');
      await sleep(50);
      WhatTextIsSearchedin_YCS()
    }
    if (!(document.querySelector("div.YCS-optional-function-CONTAINER"))) {
      await waitFor(_ => document.visibilityState == 'visible');
      await sleep(50);
      await AddmoreButtonFunctionality()
    }
    await waitFor(_ => document.getElementById("ycs-input-search"));
    if (document.getElementById('ycs-input-search').getAttribute("type") != "search") {
      document.getElementById('ycs-input-search').setAttribute("type", "search")
    }
    document.getElementById("ycs-input-search").addEventListener("blur", function() {
      document.getSelection().removeAllRanges()
    });
    ISE("ytd-app").focus();
    console.log("The Script is running.")
  } else {
    console.log("It's not on video page and the extension can't run here so it's not running:<")
  }
}

function YCS_visibilityDS() {
  if (document.activeElement === ISE('#ycs-input-search')) {
    document.getElementById("ycs-input-search").blur()
  }
}
window.addEventListener('locationchange', YCSSTARTER);
document.addEventListener('visibilitychange', YCS_visibilityDS);
async function SearchValueCLEAR(e) {
  if (document.getElementById('ycs-input-search').value.length == "0") {
    document.getElementById("ycs_btn_clear").click();
    document.getElementById('ycs-input-search').blur()
  }
}

function doc_keyUp(a) {
  let Hotkey1 = a.which == 83;
  let Hotkey2 = a.altKey;
  if (Hotkey2 && Hotkey1 && !(a.MetaKey && a.CtrlKey && a.shiftKey)) {
    if (ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_Overlay") || ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_OverlaySimple")) {
      if (document.activeElement.id == "ycs-input-search") {
        document.getElementById("ycs-input-search").blur();
        ISE("#CollapseButton").click();
        let docPositionX = window.scrollX;
        let docPositionY = window.scrollY;
        ISE(".html5-video-player.ytp-transparent.ytp-exp-bottom-control-flexbox.ytp-larger-tap-buttons.ytp-exp-ppp-update").focus();
        window.scrollTo(docPositionX, docPositionY)
      } else {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          ISE("#CollapseButton").click()
        }
        document.getElementById("ycs-input-search").focus()
      }
    } else {
      if (document.activeElement.id == "ycs-input-search") {
        document.getElementById("ycs-input-search").blur();
        window.scrollTo(0, 0)
      } else {
        document.getElementById("ycs-input-search").focus()
      }
    }
  }
}
async function AddmoreButtonFunctionality() {
  await waitFor(_ => document.querySelector(".ycs-app-main"));
  if (!document.querySelector("div.YCS-optional-function-CONTAINER")) {
    let Create_Optionalmorephysicalfunction = document.createElement("div");
    Create_Optionalmorephysicalfunction.setAttribute("class", "YCS-optional-function-CONTAINER");
    Create_Optionalmorephysicalfunction.setAttribute("style", "position: relative;font-size: 20px;float: left;margin-top: 5px;margin-bottom: 5px;clear: both;");
    await document.getElementsByClassName("ycs-app-main")[0].insertBefore(Create_Optionalmorephysicalfunction, document.getElementsByClassName("ycs-app-main")[0].children[2])
  }
  if (!document.querySelector("style.YCS-optional-function-CONTAINER")) {
    let CreateCSS_Optionalmorephysicalfunction = document.createElement("style");
    CreateCSS_Optionalmorephysicalfunction.setAttribute("class", "YCS-optional-function-CONTAINER");
    CreateCSS_Optionalmorephysicalfunction.innerHTML = "\n" + "@import url('https://fonts.googleapis.com/css2?family=Baloo+2&display=swap');\n" + "\n" + 'div.YCS-optional-function-CONTAINER *:hover:not(#SearchAddons, #SearchAddons *) {\n' + '	filter: brightness(90%);\n' + '}\n' + 'div.YCS-optional-function-CONTAINER *:active {\n' + '	filter: brightness(80%);\n' + '}\n' + 'div.YCS-optional-function-CONTAINER *:not(:first-child) {\n' + ' margin-left: 5px;' + ' position: relative;' + ' bottom: 5px;' + '}\n' + 'div.YCS-optional-function-CONTAINER * {\n' + ' display: inline-block;\n' + '}\n';
    await document.head.appendChild(CreateCSS_Optionalmorephysicalfunction)
  }
  var c = document.querySelector("div.YCS-optional-function-CONTAINER");
  var d = document.querySelector("style.YCS-optional-function-CONTAINER");
  var f = document.getElementById("ycs-input-search");
  let SearchAddons = true;
  if (SearchAddons) {
    let ElmCONT = document.createElement("div");
    ElmCONT.setAttribute("id", "SearchAddons");
    await c.prepend(ElmCONT);
    var g = ISE("#SearchAddons");
    d.innerHTML += "\n\n\n\n\n/*====SearchAddons=====*/" + "div.YCS-optional-function-CONTAINER #SearchAddons {\n" + "  transform: scale(80%);\n" + "  position: relative;\n" + "  top: -10px;\n" + "  left: -10px;\n" + "  display: block;\n" + "  background: #dfdfdf;\n" + '  border-radius: 4px;\n' + '  box-shadow: inset 0 0 7px 0 #00000024;\n' + "  color: black;\n" + "}\n";
    let timestampMATCH = true;
    if (timestampMATCH) {
      let timestampMATCH_compiledData = {
        "style": "\n\n\n/*--timestampMATCH---*/" + '.Checkbox_SearchAddons span#text {\n' + '  position: relative;\n' + '  left: 4px;\n' + '}\n' + '/* Customize the label (the container) */\n' + '.Checkbox_SearchAddons {\n' + '  display: inline-block;\n' + '  position: relative;\n' + '  padding-left: 27px;\n' + '  margin: 12px;\n' + '  cursor: pointer;\n' + '  font-family: calibri;\n' + '  font-size: 15px;\n' + '  user-select: none;\n' + '}\n' + '\n' + '/* Hide the browser\'s default checkbox */\n' + '.Checkbox_SearchAddons input[type="checkbox"] {\n' + '  position: absolute;\n' + '  opacity: 0;\n' + '  cursor: pointer;\n' + '  height: 0;\n' + '  width: 0;\n' + '}\n' + '\n' + '/* Create a custom checkbox */\n' + '.Checkbox_SearchAddons span#Custom-Checkbox {\n' + '  position: absolute;\n' + '  top: 0;\n' + '  left: 0;\n' + '  height: 20px;\n' + '  width: 20px;\n' + '  background-color: #eee;\n' + '  border-radius: 50%;\n' + '}\n' + '\n' + '/* On mouse-over, add a grey background color */\n' + '.Checkbox_SearchAddons:hover input[type="checkbox"] ~ span#Custom-Checkbox {\n' + '  filter: brightness(80%);\n' + '}\n' + '\n' + '/* When the checkbox is checked, add a blue background */\n' + '.Checkbox_SearchAddons input[type=\'checkbox\']:checked ~ span#Custom-Checkbox {\n' + '  background-color: #67b971;\n' + '}\n' + '\n' + '/* Create the checkmark/indicator (hidden when not checked) */\n' + '.Checkbox_SearchAddons span#Custom-Checkbox:after {\n' + '  content: "";\n' + '  position: absolute;\n' + '  display: none;\n' + '}\n' + '\n' + '/* Show the checkmark when checked */\n' + '.Checkbox_SearchAddons input[type=\'checkbox\']:checked ~ span#Custom-Checkbox:after {\n' + '  display: block;\n' + '}\n' + '\n' + '/* Style the checkmark/indicator */\n' + '.Checkbox_SearchAddons span#Custom-Checkbox:after {\n' + '  left: 7px;\n' + '  top: 4px;\n' + '  width: 6px;\n' + '  height: 9px;\n' + '  border: solid white;\n' + '  border-width: 0 2px 2px 0;\n' + '  -webkit-transform: rotate(45deg);\n' + '  -ms-transform: rotate(45deg);\n' + '  transform: rotate(45deg);\n' + '}\n',
        "YTMarkerStyle": "/*YTTimestampMarker*/" + "\n.Absolutematch_yttimestamp {\n" + "  background: #0cbcc92b;\n" + "  padding: 10px;\n" + "  border-radius: 5px;\n" + "}\n" + ".Textmatch_yttimestampEXP {\n" + "  background: #EEE8A92b;\n" + "  padding: 10px;\n" + "  border-radius: 5px;\n" + "}\n"
      };
      d.innerHTML += timestampMATCH_compiledData.style;
      let a = document.createElement('label');
      a.setAttribute("class", "Checkbox_SearchAddons");
      a.setAttribute("id", "FindMatchedTimeStamps");
      await g.appendChild(a);
      let aa = document.createElement('span');
      aa.setAttribute("id", "text");
      aa.innerHTML = "find timestamp";
      a.appendChild(aa);
      let ab = document.createElement('input');
      ab.setAttribute("type", "checkbox");
      a.appendChild(ab);
      let ac = document.createElement('span');
      ac.setAttribute("id", "Custom-Checkbox");
      a.appendChild(ac);
      ISE('.Checkbox_SearchAddons#FindMatchedTimeStamps input[type="checkbox"]').checked = false;
      let ytMARKERCSS = document.createElement("style");
      ytMARKERCSS.setAttribute("class", "YTTimestamp_match");
      ytMARKERCSS.innerHTML = timestampMATCH_compiledData.YTMarkerStyle;
      await document.head.appendChild(ytMARKERCSS);
      let YTFindMatchedResult = document.createElement("label");
      YTFindMatchedResult.setAttribute("id", "YCS_TimestampMatchResult");
      await document.getElementById("ycs-search").children[0].appendChild(YTFindMatchedResult);
      ISE("label#YCS_TimestampMatchResult").style.float = "right";
      ISE("#ycs_btn_timestamps").addEventListener("click", ClearResult);
      ISE("#ycs_btn_author").addEventListener("click", ClearResult);
      ISE("#ycs_btn_likes").addEventListener("click", ClearResult);
      ISE("#ycs_btn_replied_comments").addEventListener("click", ClearResult);
      ISE("#ycs_btn_members").addEventListener("click", ClearResult);
      ISE("#ycs_btn_donated").addEventListener("click", ClearResult);
      ISE("#ycs_btn_sort_first").addEventListener("click", ClearResult);
      ISE("#ycs_btn_random").addEventListener("click", ClearResult);
      ISE("#ycs_btn_clear").addEventListener("click", ClearResult);
      let checkboxELEM = await ISE(".Checkbox_SearchAddons#FindMatchedTimeStamps input[type='checkbox']");
      checkboxELEM.addEventListener("change", async function() {
        if (ISE('.Checkbox_SearchAddons#FindMatchedTimeStamps input[type="checkbox"]').checked) {
          document.getElementById("ycs-input-search").addEventListener("keyup", FindComment_TimeStamps);
          ISE("#ycs_btn_search").addEventListener("click", FindComment_TimeStamps);
          await GM.setValue("YCSADDONS_YTMatchedTimeStamp", true);
          console.log("ON")
        } else if (!ISE('.Checkbox_SearchAddons#FindMatchedTimeStamps input[type="checkbox"]').checked) {
          document.getElementById("ycs-input-search").removeEventListener("keyup", FindComment_TimeStamps);
          ISE("#ycs_btn_search").removeEventListener("click", FindComment_TimeStamps);
          ISE("label#YCS_TimestampMatchResult").innerHTML = "";
          await GM.setValue("YCSADDONS_YTMatchedTimeStamp", false);
          console.log("OFF")
        }
      });
      let ToggleState = await GM.getValue("YCSADDONS_YTMatchedTimeStamp", false);
      if (ToggleState && ToggleState == true) {
        document.getElementById("ycs-input-search").addEventListener("keyup", FindComment_TimeStamps);
        ISE("#ycs_btn_search").addEventListener("click", FindComment_TimeStamps);
        ISE('.Checkbox_SearchAddons#FindMatchedTimeStamps input[type="checkbox"]').checked = true;
        console.log("Timestamp matched turned on.");
        console.log("GM.Variable State: " + await GM.getValue("YCSADDONS_YTMatchedTimeStamp", false))
      } else {
        console.log("Timestamp matched not enabled.");
        console.log("GM.Variable State: " + await GM.getValue("YCSADDONS_YTMatchedTimeStamp", false))
      }
    }
    if (g.children.length == 0) {
      g.remove()
    }
  }
  let ToptheBTNToggle = true;
  let PauseOnWhenSearchcmnt = true;
  let SelectAllOnfocus = true;
  let BlurAfterEnterinSearchField = true;
  let YCSBOX_OverlayCSS = true;
  let YCSBOX_OverlaySimpleCSS = true;
  if (ToptheBTNToggle) {
    let Create_ToptheBTN = document.createElement("div");
    Create_ToptheBTN.setAttribute("id", "GTopButton");
    Create_ToptheBTN.setAttribute("style", "position: relative;border-radius: 15%;background: #B5E1DB;width: 25px;height: 25px;color: #3c9fa3;cursor: pointer;display: inline-block;");
    Create_ToptheBTN.innerHTML = '<i class="far fa-arrow-alt-circle-up" style="margin: 0;position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);"></i>';
    await c.appendChild(Create_ToptheBTN);
    Create_ToptheBTN.setAttribute("title", "Click to make the comment-searchResult go to top of it.\nRight Click to go to top of page.");
    document.getElementById("GTopButton").addEventListener("click", function() {
      document.getElementById("ycs-search-result").scrollTo(0, 0)
    });
    document.getElementById("GTopButton").addEventListener("contextmenu", function(e) {
      e.preventDefault();
      window.scrollTo(0, 0)
    })
  }
  if (SelectAllOnfocus) {
    let ToggleStatus = "ON";
    if (ToggleStatus == "OFF") {
      let Create_toggleSelectAllOnfocus = document.createElement("div");
      Create_toggleSelectAllOnfocus.setAttribute("id", "SelectAll-Onfocus");
      Create_toggleSelectAllOnfocus.setAttribute("style", "display: inline-block;background: rgb(231 231 231);border-radius: 25%;text-shadow: -1px 1px 0px #ffffff, 1px 1px 0px #fff, 1px -1px 0 #fff, -1px -1px 0 #fff;cursor: grabbing;color: grey;");
      Create_toggleSelectAllOnfocus.setAttribute("class", "fas fa-pen");
      await c.appendChild(Create_toggleSelectAllOnfocus);
      document.getElementById("SelectAll-Onfocus").setAttribute("title", "Just like casual");
      document.getElementById("SelectAll-Onfocus").addEventListener("click", SelectAllOnfocus_ON)
    } else if (ToggleStatus == "ON") {
      f.addEventListener("focus", SelectAllOnfocus_func);
      let Create_toggleSelectAllOnfocus = document.createElement("div");
      Create_toggleSelectAllOnfocus.setAttribute("id", "SelectAll-Onfocus");
      Create_toggleSelectAllOnfocus.setAttribute("style", "display: inline-block;background: rgb(231 231 231);border-radius: 25%;text-shadow: -1px 1px 0px #ffffff, 1px 1px 0px #fff, 1px -1px 0 #fff, -1px -1px 0 #fff;cursor: grabbing;color: grey;");
      Create_toggleSelectAllOnfocus.setAttribute("class", "fas fa-pen-square");
      await c.appendChild(Create_toggleSelectAllOnfocus);
      document.getElementById("SelectAll-Onfocus").setAttribute("title", "All Text selected when input field is focused.");
      document.getElementById("SelectAll-Onfocus").addEventListener("click", SelectAllOnfocus_OFF)
    }
  }
  if (PauseOnWhenSearchcmnt) {
    let Create_PauseOnWhenSearchElem = document.createElement("div");
    Create_PauseOnWhenSearchElem.setAttribute("id", "PauseOnWhenSearchBTN");
    Create_PauseOnWhenSearchElem.setAttribute("style", "background: rgb(163,163,163);padding: 3px;border-radius: 6px;cursor: url(https://cdn.custom-cursor.com/128/assets/pointers/32/Translucent_Pixel_Cursor.png) , pointer;");
    await c.appendChild(Create_PauseOnWhenSearchElem);
    let PauseOnWhenSearchcmnt_ToggleStart = false;
    if (PauseOnWhenSearchcmnt_ToggleStart) {
      await sleep(50);
      let ButtonElem = document.getElementById("PauseOnWhenSearchBTN");
      f.addEventListener("focus", PauseYTVid);
      ButtonElem.setAttribute("class", "fas fa-stop-circle");
      ButtonElem.style.color = "rgb(249,107,86)";
      ButtonElem.addEventListener("click", PauseOnWhenSearch_Disableit);
      await sleep(70);
      ButtonElem.title = "Video will be paused when you're searching comments."
    } else {
      let ButtonElem = document.getElementById("PauseOnWhenSearchBTN");
      ButtonElem.setAttribute("class", "fas fa-play-circle");
      ButtonElem.style.color = "rgb(107,245,86)";
      ButtonElem.addEventListener("click", PauseOnWhenSearch_Enableit);
      await sleep(90);
      ButtonElem.title = "This button function is disabled."
    }
  }
  if (BlurAfterEnterinSearchField) {
    let ToggleStatusOfThisFunc_Stored = await GM.getValue("BlurAfterEnterinSearchField_Toggle", false);
    let ToggleStatusOfThisFunc = "OFF";
    let CSS_BlurAfterEnterinSearchField = {
      "a": "\n\n\n/* ===Blur() after enter in SearchField CSS=== */\n" + '#BlurAfterSearch[ToggleStatus="OFF"] {\n' + ' box-shadow: inset 0 0 20px 1px rgba(219, 83, 83, 40%), 0 0 5px 0 black;\n' + ' color: #72706f;\n' + '}\n' + '#BlurAfterSearch[ToggleStatus="ON"] {\n' + ' box-shadow: inset 0 0 15px 1px greenyellow, 0 0 5px 0 rgb(100,100,100);\n' + ' animation: shakyshakeHourglass_icon 2s infinite;\n' + ' color: #FFF;\n' + '}\n' + '@keyframes shakyshakeHourglass_icon {\n' + ' 0% {\n' + '  transform: rotatez(0deg);\n' + ' }\n' + ' 25% {\n' + '  transform: rotatez(10deg);\n' + ' }\n' + ' 30% {\n' + '  transform: rotatez(15deg);\n' + ' }\n' + ' 35% {\n' + '  transform: rotatez(10deg);\n' + ' }\n' + ' 40% {\n' + '  transform: rotatez(15deg);\n' + ' }\n' + ' 50% {\n' + '  transform: rotatez(0deg);\n' + ' }\n' + ' 75% {\n' + '  transform: rotatez(-10deg);\n' + ' }\n' + ' 80% {\n' + '  transform: rotatez(-15deg);\n' + ' }\n' + ' 85% {\n' + '  transform: rotatez(-10deg);\n' + ' }\n' + ' 90% {\n' + '  transform: rotatez(-15deg);\n' + ' }\n' + '}\n'
    };
    d.innerHTML += CSS_BlurAfterEnterinSearchField.a
    let Create_thisfunctionElem = document.createElement("div");
    Create_thisfunctionElem.setAttribute("style", "background: rgb(240,240,240);text-align: center;padding: 5px;border-radius: 7px;width: 27px;margin: 0;font-size: 17px;cursor: progress;");
    Create_thisfunctionElem.setAttribute("id", "BlurAfterSearch");
    await c.appendChild(Create_thisfunctionElem);
    Create_thisfunctionElem.addEventListener("contextmenu", BlurAfterEnterinSearchField_ctxSettings);
    if (ToggleStatusOfThisFunc.match(/ON/i) || ToggleStatusOfThisFunc_Stored.match(/ON/i)) {
      let Get_thisfunctionElem = document.getElementById("BlurAfterSearch");
      Get_thisfunctionElem.setAttribute("ToggleStatus", "ON");
      Get_thisfunctionElem.setAttribute("class", "fas fa-hourglass-half");
      let GetDelay = await GM.getValue("BlurycsSearchField_delay", 10);
      Get_thisfunctionElem.setAttribute("title", "Gonna blur() the search element after enter the search in " + GetDelay + " Secs");
      f.addEventListener("keyup", BlurycsSearchField);
      Get_thisfunctionElem.addEventListener("click", BlurAfterEnterinSearchField_Disableit, {
        once: true
      })
    } else if (ToggleStatusOfThisFunc.match(/OFF/i) || ToggleStatusOfThisFunc_Stored.match(/OFF/i)) {
      let Get_thisfunctionElem = document.getElementById("BlurAfterSearch");
      Get_thisfunctionElem.setAttribute("ToggleStatus", "OFF");
      Get_thisfunctionElem.setAttribute("title", "Not gonna blur() the Search element when it\'s entered");
      Get_thisfunctionElem.setAttribute("class", "fas fa-hourglass");
      Get_thisfunctionElem.addEventListener("click", BlurAfterEnterinSearchField_Enableit, {
        once: true
      })
    }
  }
  if (YCSBOX_OverlayCSS && !YCSBOX_OverlaySimpleCSS) {
    let YCSOverlay_CSSValue = {
      'a': "\n\n\n/* ===YCSBOX_OverlayCSS=== */\n" + ".ycs-app.YCS-ModCSSByNJ1n9_Overlay {\n" + "  z-index: 2500;\n" + "  position: fixed;\n" + "  padding: 20px;\n" + "  background: var(--yt-spec-brand-background-solid);\n" + "  left: auto;\n" + "  right: -45px;\n" + "  top: 0;\n" + "  opacity: 95%;\n" + "  width: 1000px;\n" + "  border-color: var(--yt-spec-text-primary) !important;" + "  border: solid 2px !important;\n" + "  border-radius: 5px;\n" + "  transition: all 600ms ease-out;\n" + "}\n" + '.ycs-app.YCS-ModCSSByNJ1n9_Overlay[CollapsedState="true"] {\n' + "	transform: translateX(95.5%);" + "}\n" + '.ycs-app.YCS-ModCSSByNJ1n9_Overlay[CollapsedState="false"] {\n' + "  transform: scale(90%);" + "}\n"
    };
    d.innerHTML += YCSOverlay_CSSValue.a;
    let ToggleOverlayMOD_Button = document.createElement("div");
    ToggleOverlayMOD_Button.setAttribute("class", "fas fa-clone");
    ToggleOverlayMOD_Button.setAttribute("id", "YCSBox-OverlayToggle") ToggleOverlayMOD_Button.setAttribute("style", "color: rgb(229, 92, 92);padding: 0px 5px;cursor: alias;");
    await c.appendChild(ToggleOverlayMOD_Button);
    ToggleOverlayMOD_Button.addEventListener("click", ToggleMODButton_Overlay);
    ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is normal mode.");
    let ToggleOverlayMOD_State = await GM.getValue("YCSSTYLEMod_State", null);
    if (ToggleOverlayMOD_State.match(/^Overlay/i)) {
      ISE(".ycs-app").style.transitionDuration = "50ms";
      ISE(".ycs-app").style.opacity = "0";
      await sleep(20);
      if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_Overlay")) {
        ISE(".ycs-app").classList.add("YCS-ModCSSByNJ1n9_Overlay")
      }
      ISE(".ycs-app").setAttribute("CollapsedState", "true");
      ISE(".ycs-app").style.top = "0";
      ISE("#YCSBox-OverlayToggle").style.color = "rgb(145, 213, 153)";
      let CollapsedToggle = document.createElement("div");
      CollapsedToggle.setAttribute("id", "CollapseButton");
      CollapsedToggle.setAttribute("style", "cursor: pointer;width: 25px;height: 290px;position: absolute;left: -20px;top: 2px;background: #aacbe7;border-radius: 15px;opacity: 90%;");
      await ISE(".ycs-app").appendChild(CollapsedToggle);
      CollapsedToggle.addEventListener("click", function() {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          ISE(".ycs-app").setAttribute("CollapsedState", "false");
          if (ISE(".ycs-app").offsetHeight >= 779) {
            ISE(".ycs-app").style.top = "-20px"
          } else {
            ISE(".ycs-app").style.top = "0"
          }
          document.addEventListener("keydown", Disable_Key);
          document.addEventListener("keyup", CollapseOverlay_Shortcut)
        } else if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
          ISE(".ycs-app").setAttribute("CollapsedState", "true");
          ISE(".ycs-app").style.top = "0";
          document.removeEventListener("keydown", Disable_Key);
          document.removeEventListener("keyup", CollapseOverlay_Shortcut)
        }
      });
      ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is in overlay-mode.");
      await sleep(30);
      await waitFor(_ => document.visibilityState == 'visible');
      ISE(".ycs-app").style.opacity = "";
      ISE(".ycs-app").style.transitionDuration = "";
      await YCSBox_NotOverwhelmHeight();
      window.addEventListener("resize", YCSBox_NotOverwhelmHeight);
      f.addEventListener("search", CheckSizeResize);
      ISE("#ycs_btn_search").addEventListener("click", CheckSizeResize);
      ISE(".ycs-btn-panel.ycs_noselect").addEventListener("click", CheckSizeResize);
      if (document.activeElement == ISE("#ycs-input-search.ycs-search__input")) {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          await waitFor(_ => ISE("#CollapseButton"));
          ISE("#CollapseButton").click()
        }
      }
    }
  }
  if (YCSBOX_OverlaySimpleCSS && !YCSBOX_OverlayCSS) {
    let YCSSimplerOverlay_CSSValue = {
      'a': "\n\n\n/* ===YCSBOX_SimpleOverlayCSS=== *\/\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple {\n" + "  z-index: 2500;\n" + "  position: fixed;\n" + "  padding: 20px;\n" + "  background: var(--yt-spec-brand-background-solid);\n" + "  left: auto;\n" + "  right: -25px;\n" + "  opacity: 95%;\n" + "  width: 500px;\n" + "  top: 0;\n" + "  border-color: var(--yt-spec-text-primary) !important;\n" + "  border: solid 2px !important;\n" + "  border-radius: 5px;\n" + "  transition: all 600ms ease-out;\n" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple .ycs_infobar_btns,\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple .ycs-btn-panel *,\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple #ycs_btn_open_modal,\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple #ycs_view_mode,\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple .ycs-infobar\n" + "{\n" + "  display: none;\n" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple div.YCS-optional-function-CONTAINER {\n" + "  margin-top: 15px !important;\n" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple div#ycs-search-result * {\n" + "  font-size: 13px;\n" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple .ycs-datetime-goto {\n" + "  font-size: 12px !important;\n" + "}\n" + '.ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple[CollapsedState="true"] {\n' + "	transform: translateX(95%);" + "}\n" + '.ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple[CollapsedState="false"] {\n' + "  transform: scale(90%);" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple  #ycs_btn_clear {\n" + "  display: inline !important;\n" + "  top: -36px;\n" + "  position: relative;\n" + "  transform: scale(1.45);\n" + "}\n"
    };
    d.innerHTML += YCSSimplerOverlay_CSSValue.a;
    let ToggleOverlayMOD_Button = document.createElement("div");
    ToggleOverlayMOD_Button.setAttribute("class", "fas fa-clone");
    ToggleOverlayMOD_Button.setAttribute("id", "YCSBox-OverlayToggle") ToggleOverlayMOD_Button.setAttribute("style", "color: rgb(229, 92, 92);padding: 0px 5px;cursor: alias;");
    await c.appendChild(ToggleOverlayMOD_Button);
    ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is normal mode.");
    ISE("#YCSBox-OverlayToggle").addEventListener("click", async function() {
      if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_OverlaySimple")) {
        ISE(".ycs-app").style.transitionDuration = "50ms";
        ISE(".ycs-app").style.opacity = "0";
        ISE(".ycs-app").setAttribute("CollapsedState", "true");
        ISE(".ycs-app").classList.add("YCS-ModCSSByNJ1n9_OverlaySimple");
        await sleep(70);
        ISE("#YCSBox-OverlayToggle").style.color = "rgb(145, 213, 153)";
        let CollapsedToggle = document.createElement("div");
        CollapsedToggle.setAttribute("id", "CollapseButton");
        CollapsedToggle.setAttribute("style", "cursor: pointer;width: 19px;height: 190px;position: absolute;left: -19px;top: 0px;background: #aacbe7;border-top-left-radius: 15px;border-top-right-radius: 0;border-bottom-right-radius: 0;border-bottom-left-radius: 15px;opacity: 90%;");
        await ISE(".ycs-app").appendChild(CollapsedToggle);
        CollapsedToggle.addEventListener("click", function() {
          if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
            ISE(".ycs-app").setAttribute("CollapsedState", "false");
            document.addEventListener("keydown", Disable_Key);
            document.addEventListener("keyup", CollapseOverlay_Shortcut)
          } else if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
            document.removeEventListener("keyup", CollapseOverlay_Shortcut);
            document.removeEventListener("keydown", Disable_Key);
            ISE(".ycs-app").setAttribute("CollapsedState", "true")
          }
        });
        GM.setValue("YCSSTYLEMod_State", "SimpleOverlay");
        ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is in overlay-mode\n[Simpler version].");
        await sleep(70);
        ISE(".ycs-app").style.opacity = "";
        ISE(".ycs-app").style.transitionDuration = "";
        await YCSBox_NotOverwhelmHeight();
        window.addEventListener("resize", YCSBox_NotOverwhelmHeight);
        f.addEventListener("search", CheckSizeResize);
        ISE("#ycs_btn_search").addEventListener("click", CheckSizeResize);
        ISE(".ycs-btn-panel.ycs_noselect").addEventListener("click", CheckSizeResize)
      } else if (ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_OverlaySimple")) {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
          document.removeEventListener("keyup", CollapseOverlay_Shortcut);
          document.removeEventListener("keydown", Disable_Key)
        }
        ISE(".ycs-app").classList.remove("YCS-ModCSSByNJ1n9_OverlaySimple");
        ISE("#CollapseButton").remove();
        ISE("#YCSBox-OverlayToggle").style.color = "rgb(229, 92, 92)";
        if (ISE(".ycs-app").getAttribute("style").length == 0) {
          ISE(".ycs-app").removeAttribute("style")
        }
        window.removeEventListener("resize", YCSBox_NotOverwhelmHeight);
        f.removeEventListener("search", CheckSizeResize);
        ISE("#ycs_btn_search").removeEventListener("click", CheckSizeResize);
        ISE(".ycs-btn-panel.ycs_noselect").removeEventListener("click", CheckSizeResize);
        ISE(".ycs-app").removeAttribute("CollapsedState");
        if (ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result")) {
          ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").style.maxHeight = ""
        }
        GM.setValue("YCSSTYLEMod_State", null);
        ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is normal mode.")
      }
    });
    let ToggleMOD_State = await GM.getValue("YCSSTYLEMod_State", null);
    if (ToggleMOD_State.match(/^SimpleOverlay/i)) {
      ISE(".ycs-app").style.transitionDuration = "50ms";
      ISE(".ycs-app").style.opacity = "0";
      await sleep(20);
      if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_OverlaySimple")) {
        ISE(".ycs-app").classList.add("YCS-ModCSSByNJ1n9_OverlaySimple")
      }
      ISE(".ycs-app").setAttribute("CollapsedState", "true");
      ISE("#YCSBox-OverlayToggle").style.color = "rgb(145, 213, 153)";
      let CollapsedToggle = document.createElement("div");
      CollapsedToggle.setAttribute("id", "CollapseButton");
      CollapsedToggle.setAttribute("style", "cursor: pointer;width: 19px;height: 190px;position: absolute;left: -19px;top: 0px;background: #aacbe7;border-top-left-radius: 15px;border-top-right-radius: 0;border-bottom-right-radius: 0;border-bottom-left-radius: 15px;opacity: 90%;");
      await ISE(".ycs-app").appendChild(CollapsedToggle);
      CollapsedToggle.addEventListener("click", function() {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          ISE(".ycs-app").setAttribute("CollapsedState", "false");
          document.addEventListener("keydown", Disable_Key);
          document.addEventListener("keyup", CollapseOverlay_Shortcut)
        } else if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
          ISE(".ycs-app").setAttribute("CollapsedState", "true");
          ISE(".ycs-app").style.top = "0";
          document.removeEventListener("keydown", Disable_Key);
          document.removeEventListener("keyup", CollapseOverlay_Shortcut)
        }
      });
      ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is in overlay-mode\n[Simpler version].");
      await sleep(30);
      await waitFor(_ => document.visibilityState == 'visible');
      ISE(".ycs-app").style.opacity = "";
      ISE(".ycs-app").style.transitionDuration = "";
      await YCSBox_NotOverwhelmHeight();
      window.addEventListener("resize", YCSBox_NotOverwhelmHeight);
      f.addEventListener("search", CheckSizeResize);
      ISE("#ycs_btn_search").addEventListener("click", CheckSizeResize);
      ISE(".ycs-btn-panel.ycs_noselect").addEventListener("click", CheckSizeResize);
      if (document.activeElement == ISE("#ycs-input-search.ycs-search__input")) {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          await waitFor(_ => ISE("#CollapseButton"));
          ISE("#CollapseButton").click()
        }
      }
    }
  }
  if (YCSBOX_OverlayCSS && YCSBOX_OverlaySimpleCSS) {
    let YCSBOXMode_CSSCompile = {
      "YCSOverlay_CSSValue": "\n\n\n/* ===YCSBOX_OverlayCSS=== */\n" + ".ycs-app.YCS-ModCSSByNJ1n9_Overlay {\n" + "  z-index: 2500;\n" + "  position: fixed;\n" + "  padding: 20px;\n" + "  background: var(--yt-spec-brand-background-solid);\n" + "  left: auto;\n" + "  right: -45px;\n" + "  opacity: 95%;\n" + "  width: 1000px;\n" + "  border-color: var(--yt-spec-text-primary) !important;" + "  border: solid 2px !important;\n" + "  border-radius: 5px;\n" + "  transition: all 600ms ease-out;\n" + "}\n" + '.ycs-app.YCS-ModCSSByNJ1n9_Overlay[CollapsedState="true"] {\n' + "	transform: translateX(95.5%);" + "}\n" + '.ycs-app.YCS-ModCSSByNJ1n9_Overlay[CollapsedState="false"] {\n' + "  transform: scale(90%);" + "}\n",
      "YCSSimplerOverlay_CSSValue": "\n\n\n/* ===YCSBOX_SimpleOverlayCSS=== *\/\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple {\n" + "  z-index: 2500;\n" + "  position: fixed;\n" + "  padding: 20px;\n" + "  background: var(--yt-spec-brand-background-solid);\n" + "  top: 0;\n" + "  left: auto;\n" + "  right: -25px;\n" + "  opacity: 95%;\n" + "  width: 500px;\n" + "  border-color: var(--yt-spec-text-primary) !important;\n" + "  border: solid 2px !important;\n" + "  border-radius: 5px;\n" + "  transition: all 600ms ease-out;\n" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple .ycs_infobar_btns,\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple .ycs-btn-panel *,\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple #ycs_btn_open_modal,\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple #ycs_view_mode,\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple .ycs-infobar\n" + "{\n" + "  display: none;\n" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple div.YCS-optional-function-CONTAINER {\n" + "  margin-top: 15px !important;\n" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple div#ycs-search-result * {\n" + "  font-size: 13px;\n" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple .ycs-datetime-goto {\n" + "  font-size: 12px !important;\n" + "}\n" + '.ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple[CollapsedState="true"] {\n' + "	transform: translateX(95%);" + "}\n" + '.ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple[CollapsedState="false"] {\n' + "  transform: scale(90%);" + "}\n" + ".ycs-app.YCS-ModCSSByNJ1n9_OverlaySimple  #ycs_btn_clear {\n" + "  display: inline !important;\n" + "  top: -36px;\n" + "  position: relative;\n" + "  transform: scale(1.45);\n" + "}\n",
      "YCSSToggleList": "\n\n/* ===YCSBOX-ModeToggleList=== *\/\n" + "#YCSSTYLEMod_ToggleList {\n" + "  position: fixed;\n" + "  background: #6e948d;\n" + "  width: 95px;\n" + "  height: 75px;\n" + "  font-size: 13px;\n" + "  line-height: 10px;\n" + '  padding-top: 4px;\n' + '  padding-bottom: 1px;\n' + '  padding-left: 3px;\n' + '  padding-right: 3px;\n' + "  font-family: 'Baloo 2';\n" + "  text-align: center;\n" + "  border-radius: 3px;\n" + "  user-select: none;\n" + "  transform-origin: top left;\n" + "  transition: all 300ms linear;\n" + "}\n" + "#YCSSTYLEMod_ToggleList:not([Opened]) {\n" + "  transform: scale(0);\n" + "}\n" + "#YCSSTYLEMod_ToggleList[Opened] {\n" + "  transform: scale(1);\n" + "}\n" + '.YCSSTYLEMod_ToggleList {\n' + "  padding-top: 7px;\n" + "  padding-bottom: 7px;\n" + "  padding-left: 2px;\n" + "  padding-right: 2px;\n" + '}\n' + '#YCSSTYLEMod_ToggleList[ModeState="SimpleOverlay"], #YCSSTYLEMod_ToggleList[ModeState="Overlay"] {\n' + "  z-index: 3000;\n" + "}\n" + '#YCSSTYLEMod_ToggleList[ModeState="Default"] {\n' + '  z-index: 2000;\n' + '}\n' + ".YCSSTYLEMod_ToggleList:hover:not([selected]) {\n" + "  background: linear-gradient(to right, #00000064, #00000000, #00000000, #00000064);\n" + "  cursor: pointer;\n" + "}\n" + ".YCSSTYLEMod_ToggleList:active:not([selected]) {\n" + "  background: linear-gradient(to right, #00000090, #ffffff35, #ffffff35, #00000090);\n" + "  border-radius: 2px;\n" + "  }\n" + ".YCSSTYLEMod_ToggleList[selected] {\n" + "  background: rgba(230,230,230, 30%);\n" + "  border-radius: 2px;\n" + "}\n" + "@keyframes CollapseYCSToggleList {" + "  0%   {transform: scale(1); filter: blur(1px);}\n" + "  25%  {filter: brightness(70%) blur(2px);}\n" + "  50%  {filter: brightness(60%) blur(2px);}\n" + "  60%  {filter: brightness(45%) blur(0);}\n" + "  99%  {transform: scale(0);  filter: brightness(0) blur(2px);}\n" + "  100% {transform: scale(0);  filter: brightness(0) blur(0);}\n" + "}\n" + "@keyframes ExpandYCSToggleList {\n" + "  0%   {transform: scale(0); filter: brightness(70%) blur(1px);}\n" + "  50%  {filter: brightness(1) blur(0);}\n" + "  99%  {transform: scale(1);  filter: blur(1px);}\n" + "  100% {transform: scale(1);  filter: blur(0);}\n" + "}\n"
    };
    d.innerHTML += YCSBOXMode_CSSCompile[Object.keys(YCSBOXMode_CSSCompile)[0]] + YCSBOXMode_CSSCompile[Object.keys(YCSBOXMode_CSSCompile)[1]] + YCSBOXMode_CSSCompile[Object.keys(YCSBOXMode_CSSCompile)[2]];
    let ToggleOverlayMOD_Button = document.createElement("div");
    ToggleOverlayMOD_Button.setAttribute("class", "fas fa-clone");
    ToggleOverlayMOD_Button.setAttribute("id", "YCSBox-OverlayToggle");
    ToggleOverlayMOD_Button.setAttribute("style", "color: rgb(110, 164, 209);padding: 0px 5px;cursor: alias;");
    await c.appendChild(ToggleOverlayMOD_Button);
    ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is normal mode.");
    var h = document.createElement("div");
    h.setAttribute("id", "YCSSTYLEMod_ToggleList");
    let ELEMToggleListC1 = document.createElement("div");
    ELEMToggleListC1.setAttribute("class", "YCSSTYLEMod_ToggleList");
    ELEMToggleListC1.setAttribute("ToggleValue", "Default");
    ELEMToggleListC1.innerHTML = "Default";
    let ELEMToggleListC2 = document.createElement("div");
    ELEMToggleListC2.setAttribute("class", "YCSSTYLEMod_ToggleList");
    ELEMToggleListC2.setAttribute("ToggleValue", "Overlay");
    ELEMToggleListC2.innerHTML = "Overlay";
    let ELEMToggleListC3 = document.createElement("div");
    ELEMToggleListC3.setAttribute("class", "YCSSTYLEMod_ToggleList");
    ELEMToggleListC3.setAttribute("ToggleValue", "SimpleOverlay");
    ELEMToggleListC3.innerHTML = "Simple-Overlay";
    h.appendChild(ELEMToggleListC1);
    h.appendChild(ELEMToggleListC2);
    h.appendChild(ELEMToggleListC3);
    if (!document.getElementById("YCSSTYLEMod_ToggleList")) {
      await document.body.appendChild(h);
      ISE('.YCSSTYLEMod_ToggleList[ToggleValue="Default"]').addEventListener("click", YCSSTYLEMod_ToggleList_SwitchEvent);
      ISE('.YCSSTYLEMod_ToggleList[ToggleValue="Overlay"]').addEventListener("click", YCSSTYLEMod_ToggleList_SwitchEvent);
      ISE('.YCSSTYLEMod_ToggleList[ToggleValue="SimpleOverlay"]').addEventListener("click", YCSSTYLEMod_ToggleList_SwitchEvent)
    }
    let ToggleMOD_State = await GM.getValue("YCSSTYLEMod_State", null);
    if (ToggleMOD_State.match(/^Overlay/i)) {
      ISE("#YCSSTYLEMod_ToggleList").setAttribute("ModeState", "Overlay")
    } else if (ToggleMOD_State.match(/^SimpleOverlay/i)) {
      ISE("#YCSSTYLEMod_ToggleList").setAttribute("ModeState", "SimpleOverlay")
    } else {
      ISE("#YCSSTYLEMod_ToggleList").setAttribute("ModeState", "Default")
    }
    ISE("#YCSBox-OverlayToggle").addEventListener("click", function() {
      var a = document.querySelector("#YCSBox-OverlayToggle");
      var b = document.getElementById("YCSSTYLEMod_ToggleList");
      if (document.getElementById("YCSSTYLEMod_ToggleList").getAttribute("Opened") != null) {
        document.getElementById("YCSSTYLEMod_ToggleList").removeAttribute("Opened");
        document.querySelector("#YCSSTYLEMod_ToggleList").style.animation = "CollapseYCSToggleList 500ms 1"
      } else if (!document.getElementById("YCSSTYLEMod_ToggleList").getAttribute("Opened")) {
        document.getElementById("YCSSTYLEMod_ToggleList").setAttribute("Opened", "");
        let ELEml = document.querySelector("#YCSSTYLEMod_ToggleList[Opened]");
        ELEml.style.animation = "ExpandYCSToggleList 500ms 1";
        if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_Overlay") && !ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_OverlaySimple")) {
          document.querySelector("#YCSSTYLEMod_ToggleList[Opened]").style.top = "1278px";
          document.querySelector("#YCSSTYLEMod_ToggleList[Opened]").style.position = "absolute"
        } else {
          document.querySelector("#YCSSTYLEMod_ToggleList[Opened]").style.top = (a.getBoundingClientRect().bottom - 10) + "px";
          document.querySelector("#YCSSTYLEMod_ToggleList[Opened]").style.position = ""
        }
        ELEml.style.left = (a.getBoundingClientRect().right - 15) + "px"
      }
    });
    document.addEventListener("click", function(a) {
      let not_hereElm = document.querySelector("#YCSBox-OverlayToggle");
      if (a.target != not_hereElm && document.getElementById("YCSSTYLEMod_ToggleList").getAttribute("Opened") != null) {
        document.getElementById("YCSSTYLEMod_ToggleList").removeAttribute("Opened");
        document.querySelector("#YCSSTYLEMod_ToggleList").style.animation = "CollapseYCSToggleList 500ms 1"
      } else if (a.target == not_hereElm) {
        return
      }
    });
    if (ToggleMOD_State.match(/^Overlay/i)) {
      ISE('.YCSSTYLEMod_ToggleList[ToggleValue="Overlay"]').setAttribute("selected", "");
      ISE(".ycs-app").style.transitionDuration = "50ms";
      ISE(".ycs-app").style.opacity = "0";
      await sleep(20);
      if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_Overlay")) {
        ISE(".ycs-app").classList.add("YCS-ModCSSByNJ1n9_Overlay")
      }
      ISE(".ycs-app").setAttribute("CollapsedState", "true");
      ISE(".ycs-app").style.top = "0";
      let CollapsedToggle = document.createElement("div");
      CollapsedToggle.setAttribute("id", "CollapseButton");
      CollapsedToggle.setAttribute("style", "cursor: pointer;width: 25px;height: 290px;position: absolute;left: -20px;top: 2px;background: #aacbe7;border-radius: 15px;opacity: 90%;");
      await ISE(".ycs-app").appendChild(CollapsedToggle);
      CollapsedToggle.addEventListener("click", function() {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          ISE(".ycs-app").setAttribute("CollapsedState", "false");
          if (ISE(".ycs-app").offsetHeight >= 779) {
            ISE(".ycs-app").style.top = "-20px"
          } else {
            ISE(".ycs-app").style.top = "0"
          }
          document.addEventListener("keydown", Disable_Key);
          document.addEventListener("keyup", CollapseOverlay_Shortcut)
        } else if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
          ISE(".ycs-app").setAttribute("CollapsedState", "true");
          ISE(".ycs-app").style.top = "0";
          document.removeEventListener("keydown", Disable_Key);
          document.removeEventListener("keyup", CollapseOverlay_Shortcut)
        }
      });
      ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is in overlay-mode.");
      await sleep(30);
      await waitFor(_ => document.visibilityState == 'visible');
      ISE(".ycs-app").style.opacity = "";
      ISE(".ycs-app").style.transitionDuration = "";
      await YCSBox_NotOverwhelmHeight();
      window.addEventListener("resize", YCSBox_NotOverwhelmHeight);
      f.addEventListener("search", CheckSizeResize);
      ISE("#ycs_btn_search").addEventListener("click", CheckSizeResize);
      ISE(".ycs-btn-panel.ycs_noselect").addEventListener("click", CheckSizeResize);
      if (document.activeElement == ISE("#ycs-input-search.ycs-search__input")) {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          await waitFor(_ => ISE("#CollapseButton"));
          ISE("#CollapseButton").click()
        }
      }
    } else if (ToggleMOD_State.match(/^SimpleOverlay/i)) {
      ISE('.YCSSTYLEMod_ToggleList[ToggleValue="SimpleOverlay"]').setAttribute("selected", "");
      ISE(".ycs-app").style.transitionDuration = "50ms";
      ISE(".ycs-app").style.opacity = "0";
      await sleep(20);
      if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_OverlaySimple")) {
        ISE(".ycs-app").classList.add("YCS-ModCSSByNJ1n9_OverlaySimple")
      }
      ISE(".ycs-app").setAttribute("CollapsedState", "true");
      let CollapsedToggle = document.createElement("div");
      CollapsedToggle.setAttribute("id", "CollapseButton");
      CollapsedToggle.setAttribute("style", "cursor: pointer;width: 19px;height: 190px;position: absolute;left: -19px;top: 0px;background: #aacbe7;border-top-left-radius: 15px;border-top-right-radius: 0;border-bottom-right-radius: 0;border-bottom-left-radius: 15px;opacity: 90%;");
      await ISE(".ycs-app").appendChild(CollapsedToggle);
      CollapsedToggle.addEventListener("click", function() {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          ISE(".ycs-app").setAttribute("CollapsedState", "false");
          document.addEventListener("keydown", Disable_Key);
          document.addEventListener("keyup", CollapseOverlay_Shortcut)
        } else if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
          ISE(".ycs-app").setAttribute("CollapsedState", "true");
          document.removeEventListener("keydown", Disable_Key);
          document.removeEventListener("keyup", CollapseOverlay_Shortcut)
        }
      });
      ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is in overlay-mode\n[Simpler version].");
      await sleep(30);
      await waitFor(_ => document.visibilityState == 'visible');
      ISE(".ycs-app").style.opacity = "";
      ISE(".ycs-app").style.transitionDuration = "";
      if (document.activeElement == ISE("#ycs-input-search.ycs-search__input")) {
        if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
          await waitFor(_ => ISE("#CollapseButton"));
          ISE("#CollapseButton").click()
        }
      }
    } else {
      ISE('.YCSSTYLEMod_ToggleList[ToggleValue="Default"]').setAttribute("selected", "")
    }
  }
  if (!(ToptheBTNToggle) && !(SelectAllOnfocus) && !(PauseOnWhenSearchcmnt) && !(BlurAfterEnterinSearchField)) {
    document.querySelector("div.YCS-optional-function-CONTAINER").remove();
    document.querySelector("style.YCS-optional-function-CONTAINER").remove();
    console.error('no button or anything added, container deleted.')
  } else {
    console.log('button added.')
  }
  return
}

function PauseYTVid() {
  document.querySelector("video.video-stream").pause()
}
async function FindComment_TimeStamps(e) {
  if ((e && ((e.type === 'keyup' && e.which == 13) || e.type === 'click') || e == null) && !ISE("label#YCS_TimestampMatchResult").innerHTML.match(/Loading../i)) {
    ISE("label#YCS_TimestampMatchResult").style.float = "right";
    ISE("label#YCS_TimestampMatchResult").style.color = "";
    ISE("label#YCS_TimestampMatchResult").style.fontStyle = "";
    ISE("label#YCS_TimestampMatchResult").innerHTML = "Loading..";
    var a = document.querySelector("#ycs-input-search").value;
    await sleep(1000);
    while (ISE(".Absolutematch_yttimestamp")) {
      ISE(".Absolutematch_yttimestamp").classList.remove("Absolutematch_yttimestamp")
    }
    while (ISE(".Textmatch_yttimestampEXP")) {
      ISE(".Textmatch_yttimestampEXP").classList.remove("Textmatch_yttimestampEXP")
    }
    if (!a || a.length == 0) {
      let CStyle = "font-weight: 900; color: red;";
      console.error("%ctyle);
      ISE("label#YCS_TimestampMatchResult").innerHTML = ""
    } else if (a && a.match(/([0-9]+:)?[0-9]+:[0-9]+/gi)) {
      if (SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")) {
        var b = new RegExp(".*(?<![0-9])(?<!:)\\b[0]?" + a + "([0-9])?(\\s+)?.*(\\s+)?(.*)?", "gm");
        var c = {
          "Index": {
            "Included": [],
            "Excluded": [],
            "TextMatch": []
          },
          "Matched_Comment": [],
          "Excluded_Comment": [],
          "TextMatch": []
        };
        console.groupCollapsed("comment(s) with the matched timestamp [" + a + "] founded data:");
        console.group('Matching comment log:');
        for (var d = 0; d < SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment").length; d++) {
          if (SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelector(".ycs-comment__main-text").textContent.match(b)) {
            if (SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelector("a.ycs-gotochat-video[href]")) {
              if (SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelectorAll("a.ycs-gotochat-video[href]").length > 1) {
                for (var f = 0; f < SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelectorAll("a.ycs-gotochat-video[href]").length; f++) {
                  let max_check = SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelectorAll("a.ycs-gotochat-video[href]").length;
                  if (SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelectorAll("a.ycs-gotochat-video[href]")[f].textContent.match(b)) {
                    let iN = d + 1;
                    c["Matched_Comment"].push(SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d]);
                    c["Index"]["Included"].push(iN);
                    console.log('%c[' + iN + ']' + 'MATCH!', 'background: #90da93;');
                    break
                  } else if (f == max_check || f == (max_check - 1)) {
                    if (SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelector(".ycs-comment__main-text").textContent.match(b)) {
                      let iN = d + 1;
                      c["Index"]["TextMatch"].push(iN);
                      c["TextMatch"].push(SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d]);
                      console.error((d + 1) + ' Match! But only the text because there is no timestamp defined there, so it\'s probably gonna be placed at the last')
                    } else {
                      let iN = d + 1;
                      c["Excluded_Comment"].push(SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d]);
                      c["Index"]["Excluded"].push(iN);
                      console.error(iN + ' were excluded because all timestamp is not match in the comment although the scan already performed.')
                    }
                    break
                  }
                }
              } else if (SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelectorAll("a.ycs-gotochat-video[href]").length == 1) {
                if (SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelectorAll("a.ycs-gotochat-video[href]")[0].textContent.match(b)) {
                  let iN = d + 1;
                  c["Matched_Comment"].push(SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d]);
                  c["Index"]["Included"].push(iN);
                  console.log('%c[' + iN + ']' + 'MATCH!', 'background: #90da93;')
                } else {
                  let iN = d + 1;
                  c["Excluded_Comment"].push(SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d]);
                  c["Index"]["Excluded"].push(iN);
                  console.error(iN + ' were excluded because the timestamp in it (which only one) is not a match.')
                }
              }
            } else {
              if (!SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelector("a.ycs-gotochat-video[href]")) {
                let iN = d + 1;
                c["Index"]["TextMatch"].push(iN);
                c["TextMatch"].push(SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d]);
                console.error((d + 1) + ' Match! But only the text because there is no timestamp defined there, so it\'s probably gonna be placed at the last')
              }
            }
          } else {
            let iN = d + 1;
            c["Excluded_Comment"].push(SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d]);
            c["Index"]["Excluded"].push(iN);
            if (!SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment")[d].querySelector(".ycs-comment__main-text").textContent.match(b)) {
              console.error((d + 1) + ' exclude, reason: textContent is not match:P')
            } else {
              console.error('[' + d + '] welp we have a problem here<:')
            }
          }
        }
        console.groupEnd();
        if (c && c["Matched_Comment"].length != 0) {
          for (var g = 0; g < c["Matched_Comment"].length; g++) {
            if (!c["Matched_Comment"][g].classList.contains("Absolutematch_yttimestamp")) {
              c["Matched_Comment"][g].classList.add("Absolutematch_yttimestamp")
            }
          }
          for (var h = 0; h < c["TextMatch"].length; h++) {
            if (!c["TextMatch"][h].classList.contains("Textmatch_yttimestampEXP")) {
              c["TextMatch"][h].classList.add("Textmatch_yttimestampEXP")
            }
          }
          if (c["Matched_Comment"].length != 0 && SE(".Absolutematch_yttimestamp")) {
            for (let iElem2 = 0; iElem2 < SE(".Absolutematch_yttimestamp").length; iElem2++) {
              ISE("#ycs_wrap_comments").prepend(SE(".Absolutematch_yttimestamp")[iElem2])
            }
          }
          if (c["TextMatch"].length != 0 && SE(".Textmatch_yttimestampEXP")) {
            for (let iElem22 = 0; iElem22 < SE(".Textmatch_yttimestampEXP").length; iElem22++) {
              ISE("#ycs_wrap_comments").prepend(SE(".Textmatch_yttimestampEXP")[iElem22])
            }
          }
          console.log("Index that\'s match the specified timestamp: " + c["Index"]["Included"].join(", "));
          if (c["Index"]["Excluded"].length != 0) {
            console.log("Index that\'s excluded--doesnt match the specified timestamp: " + c["Index"]["Excluded"].join(", "))
          } else if (c["Index"]["Excluded"].length == 0) {
            console.log("Index that\'s excluded--doesnt match the specified timestamp: All comment is match the timestamp, nothing excluded")
          }
          console.log(c);
          if (c["Index"]["Excluded"].length != 0) {
            ISE("label#YCS_TimestampMatchResult").innerHTML = "Comment with timestamp match found: " + c["Matched_Comment"].length + "/" + SE("#ycs-search-result #ycs_wrap_comments div.ycs-render-comment").length
          } else if (c["Index"]["Excluded"].length == 0) {
            ISE("label#YCS_TimestampMatchResult").innerHTML = "Comment with timestamp match found: All"
          }
        } else if (c && c["Matched_Comment"].length == 0 || !c) {
          console.error("NOT FOUND!");
          console.groupEnd();
          ISE("label#YCS_TimestampMatchResult").style.color = "red";
          ISE("label#YCS_TimestampMatchResult").innerHTML = "There\'s no matched timestamp.";
          if (c["TextMatch"].length != 0) {
            for (var h = 0; h < c["TextMatch"].length; h++) {
              if (!c["TextMatch"][h].classList.contains("Textmatch_yttimestampEXP")) {
                c["TextMatch"][h].classList.add("Textmatch_yttimestampEXP")
              }
            };
            if (c["TextMatch"].length != 0 && SE(".Textmatch_yttimestampEXP")) {
              for (let iElem22 = 0; iElem22 < SE(".Textmatch_yttimestampEXP").length; iElem22++) {
                ISE("#ycs_wrap_comments").prepend(SE(".Textmatch_yttimestampEXP")[iElem22])
              }
            }
          }
        }
      } else {
        ISE("label#YCS_TimestampMatchResult").innerHTML = "There\'s no matched timestamp nor comment available"
      }
    } else {
      console.log("You're not searching a timestamp!");
      ISE("label#YCS_TimestampMatchResult").style.fontStyle = "italic";
      ISE("label#YCS_TimestampMatchResult").style.color = "red";
      ISE("label#YCS_TimestampMatchResult").innerHTML = "[No match--the input is not a timestamp]";
      console.groupEnd()
    }
    if (ISE("label#YCS_TimestampMatchResult").innerHTML.match(/Loading../i)) {
      ISE("label#YCS_TimestampMatchResult").innerHTML = "??"
    }
  } else {
    console.error('BLOCKED!')
  }
  return
}

function ClearResult() {
  ISE("label#YCS_TimestampMatchResult").innerHTML = ""
}

function SelectAllOnfocus_func() {
  document.getElementById("ycs-input-search").select()
}

function SelectAllOnfocus_ON() {
  document.getElementById("SelectAll-Onfocus").classList.replace("fa-pen", "fa-pen-square");
  document.getElementById("SelectAll-Onfocus").setAttribute("title", "All Text selected when input field is focused.");
  document.getElementById("ycs-input-search").addEventListener("focus", SelectAllOnfocus_func);
  document.getElementById("SelectAll-Onfocus").removeEventListener("click", SelectAllOnfocus_ON);
  document.getElementById("SelectAll-Onfocus").addEventListener("click", SelectAllOnfocus_OFF)
}

function SelectAllOnfocus_OFF() {
  document.getElementById("SelectAll-Onfocus").classList.replace("fa-pen-square", "fa-pen");
  document.getElementById("SelectAll-Onfocus").setAttribute("title", "Just like casual");
  document.getElementById("SelectAll-Onfocus").addEventListener("click", SelectAllOnfocus_ON);
  document.getElementById("SelectAll-Onfocus").removeEventListener("click", SelectAllOnfocus_OFF)
}

function PauseOnWhenSearch_Enableit() {
  let ButtonElem = document.getElementById("PauseOnWhenSearchBTN");
  document.getElementById("ycs-input-search").addEventListener("focus", PauseYTVid);
  ButtonElem.style.color = "rgb(249,107,86)";
  ButtonElem.setAttribute("class", "fas fa-stop-circle");
  ButtonElem.setAttribute("title", "Video will be paused when you're searching comments.");
  ButtonElem.addEventListener("click", PauseOnWhenSearch_Disableit);
  ButtonElem.removeEventListener("click", PauseOnWhenSearch_Enableit)
}

function PauseOnWhenSearch_Disableit() {
  let ButtonElem = document.getElementById("PauseOnWhenSearchBTN");
  document.getElementById("ycs-input-search").removeEventListener("focus", PauseYTVid);
  ButtonElem.style.color = "rgb(107,245,86)";
  ButtonElem.setAttribute("class", "fas fa-play-circle");
  ButtonElem.setAttribute("title", "This button function is disabled.");
  ButtonElem.addEventListener("click", PauseOnWhenSearch_Enableit);
  ButtonElem.removeEventListener("click", PauseOnWhenSearch_Disableit)
}
async function BlurAfterEnterinSearchField_ctxSettings(e) {
  e.preventDefault();
  if (document.getElementById("BlurAfterSearch").getAttribute("ToggleStatus") == "ON") {
    let InputValue = prompt("Set the delay?\n*this gonna be stored.");
    var a = Number(InputValue);
    if (!a) {
      return
    } else if (a && !isNaN(a)) {
      let Get_thisfunctionElem = document.getElementById("BlurAfterSearch");
      await GM.setValue("BlurycsSearchField_delay", a);
      Get_thisfunctionElem.setAttribute("title", "Gonna blur() the search element after enter the search in " + a + " Secs")
    } else {
      let AskIT = confirm("want to reset then?");
      if (AskIT) {
        let Get_thisfunctionElem = document.getElementById("BlurAfterSearch");
        GM.setValue("BlurycsSearchField_delay", null);
        Get_thisfunctionElem.setAttribute("title", "Gonna blur() the search element after enter the search in 10 Secs")
      }
    }
  }
}
async function BlurAfterEnterinSearchField_Enableit() {
  let Get_thisfunctionElem = document.getElementById("BlurAfterSearch");
  Get_thisfunctionElem.setAttribute("ToggleStatus", "ON");
  Get_thisfunctionElem.setAttribute("class", "fas fa-hourglass-half");
  document.getElementById("ycs-input-search").addEventListener("keyup", BlurycsSearchField);
  let GetDelay = await GM.getValue("BlurycsSearchField_delay", null) || 10;
  Get_thisfunctionElem.setAttribute("title", "Gonna blur() the search element after enter the search in " + GetDelay + " Secs");
  Get_thisfunctionElem.addEventListener("click", BlurAfterEnterinSearchField_Disableit, {
    once: true
  });
  GM.setValue("BlurAfterEnterinSearchField_Toggle", "ON")
}
async function BlurAfterEnterinSearchField_Disableit() {
  let Get_thisfunctionElem = document.getElementById("BlurAfterSearch");
  Get_thisfunctionElem.setAttribute("ToggleStatus", "OFF");
  Get_thisfunctionElem.setAttribute("class", "fas fa-hourglass");
  document.getElementById("ycs-input-search").removeEventListener("keyup", BlurycsSearchField);
  await GM.setValue("BlurycsSearchField_delay", 10);
  Get_thisfunctionElem.setAttribute("title", "Not gonna blur() the Search element when it\'s entered");
  Get_thisfunctionElem.addEventListener("click", BlurAfterEnterinSearchField_Enableit, {
    once: true
  });
  GM.setValue("BlurAfterEnterinSearchField_Toggle", "OFF")
}
async function ResetYCSBOXMode() {
  if (ISE(".ycs-app").getAttribute("CollapsedState")) {
    ISE(".ycs-app").removeAttribute("CollapsedState")
  }
  if (ISE(".ycs-app").getAttribute("style")) {
    ISE(".ycs-app").removeAttribute("style")
  }
  if (ISE("#CollapseButton")) {
    ISE("#CollapseButton").remove()
  }
  if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
    document.removeEventListener("keyup", CollapseOverlay_Shortcut);
    document.removeEventListener("keydown", Disable_Key)
  }
  if (ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_Overlay")) {
    ISE(".ycs-app").classList.remove("YCS-ModCSSByNJ1n9_Overlay");
    window.removeEventListener("resize", YCSBox_NotOverwhelmHeight);
    let Elem_Searchfield = document.getElementById("ycs-input-search");
    Elem_Searchfield.removeEventListener("search", CheckSizeResize);
    ISE("#ycs_btn_search").removeEventListener("click", CheckSizeResize);
    ISE(".ycs-btn-panel.ycs_noselect").removeEventListener("click", CheckSizeResize)
  } else if (ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_OverlaySimple")) {
    ISE(".ycs-app").classList.remove("YCS-ModCSSByNJ1n9_OverlaySimple");
    window.removeEventListener("resize", YCSBox_NotOverwhelmHeight);
    document.getElementById("ycs-input-search").removeEventListener("search", CheckSizeResize);
    ISE("#ycs_btn_search").removeEventListener("click", CheckSizeResize);
    ISE(".ycs-btn-panel.ycs_noselect").removeEventListener("click", CheckSizeResize);
    ISE(".ycs-app").removeAttribute("CollapsedState")
  }
  if (ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result")) {
    ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").style.maxHeight = ""
  }
  await GM.setValue("YCSSTYLEMod_State", null);
  ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is normal mode.");
  await sleep(50);
  return
}
async function YCSSTYLEMod_ToggleList_SwitchEvent(E) {
  if (!E.target.hasAttribute("selected")) {
    document.querySelector(".YCSSTYLEMod_ToggleList[selected]").removeAttribute("selected");
    E.target.setAttribute("selected", "");
    var a = E.target.getAttribute("ToggleValue");
    console.log("E.target--Toggle Value: " + a);
    console.groupCollapsed("CheckMode");
    console.log("overlay\n", a.match(/^Overlay/i));
    console.log("simple overlay\n", a.match(/^SimpleOverlay/i));
    console.groupEnd();
    var b;
    if (a == null || a == false) {
      alert("ERROR, check DevTools!");
      return
    } else if (a.match(/^Overlay/i)) {
      b = ISE(".ycs-app").getAttribute("collapsedstate");
      await ResetYCSBOXMode();
      await sleep(500);
      if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_Overlay")) {
        ISE(".ycs-app").style.transitionDuration = "50ms";
        ISE(".ycs-app").style.opacity = "0";
        ISE(".ycs-app").setAttribute("CollapsedState", "true");
        ISE(".ycs-app").classList.add("YCS-ModCSSByNJ1n9_Overlay");
        await sleep(70);
        ISE(".ycs-app").style.top = "0";
        let CollapsedToggle = document.createElement("div");
        CollapsedToggle.setAttribute("id", "CollapseButton");
        CollapsedToggle.setAttribute("style", "cursor: pointer;width: 25px;height: 290px;position: absolute;left: -20px;top: 2px;background: #aacbe7;border-radius: 15px;opacity: 90%;");
        await ISE(".ycs-app").appendChild(CollapsedToggle);
        CollapsedToggle.addEventListener("click", function() {
          if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
            ISE(".ycs-app").setAttribute("CollapsedState", "false");
            if (ISE(".ycs-app").offsetHeight >= 779) {
              ISE(".ycs-app").style.top = "-20px"
            } else {
              ISE(".ycs-app").style.top = "0"
            }
            document.addEventListener("keydown", Disable_Key);
            document.addEventListener("keyup", CollapseOverlay_Shortcut)
          } else if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
            document.removeEventListener("keyup", CollapseOverlay_Shortcut);
            document.removeEventListener("keydown", Disable_Key);
            ISE(".ycs-app").setAttribute("CollapsedState", "true");
            ISE(".ycs-app").style.top = "0"
          }
        });
        ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is in overlay-mode.");
        await sleep(70);
        await YCSBox_NotOverwhelmHeight();
        let Elem_Searchfield = document.getElementById("ycs-input-search");
        window.addEventListener("resize", YCSBox_NotOverwhelmHeight);
        Elem_Searchfield.addEventListener("search", CheckSizeResize);
        ISE("#ycs_btn_search").addEventListener("click", CheckSizeResize);
        ISE(".ycs-btn-panel.ycs_noselect").addEventListener("click", CheckSizeResize);
        ISE(".ycs-app").style.opacity = "";
        ISE(".ycs-app").style.transitionDuration = "";
        if (b && b == "false") {
          ISE(".ycs-app").setAttribute("CollapsedState", "false")
        }
      }
      console.log("Overlay")
    } else if (a.match(/^SimpleOverlay/i)) {
      b = ISE(".ycs-app").getAttribute("collapsedstate");
      await ResetYCSBOXMode();
      await sleep(500);
      if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_OverlaySimple")) {
        ISE(".ycs-app").style.transitionDuration = "50ms";
        ISE(".ycs-app").style.opacity = "0";
        ISE(".ycs-app").setAttribute("CollapsedState", "true");
        ISE(".ycs-app").classList.add("YCS-ModCSSByNJ1n9_OverlaySimple");
        await sleep(70);
        let CollapsedToggle = document.createElement("div");
        CollapsedToggle.setAttribute("id", "CollapseButton");
        CollapsedToggle.setAttribute("style", "cursor: pointer;width: 19px;height: 190px;position: absolute;left: -19px;top: 0px;background: #aacbe7;border-top-left-radius: 15px;border-top-right-radius: 0;border-bottom-right-radius: 0;border-bottom-left-radius: 15px;opacity: 90%;");
        await ISE(".ycs-app").appendChild(CollapsedToggle);
        CollapsedToggle.addEventListener("click", function() {
          if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
            ISE(".ycs-app").setAttribute("CollapsedState", "false");
            document.addEventListener("keydown", Disable_Key);
            document.addEventListener("keyup", CollapseOverlay_Shortcut)
          } else if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
            ISE(".ycs-app").setAttribute("CollapsedState", "true");
            document.removeEventListener("keydown", Disable_Key);
            document.removeEventListener("keyup", CollapseOverlay_Shortcut)
          }
        });
        ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is in overlay-mode\n[Simpler version].");
        await sleep(70);
        await YCSBox_NotOverwhelmHeight();
        window.addEventListener("resize", YCSBox_NotOverwhelmHeight);
        document.getElementById("ycs-input-search").addEventListener("search", CheckSizeResize);
        ISE("#ycs_btn_search").addEventListener("click", CheckSizeResize);
        ISE(".ycs-btn-panel.ycs_noselect").addEventListener("click", CheckSizeResize);
        ISE(".ycs-app").style.opacity = "";
        ISE(".ycs-app").style.transitionDuration = "";
        if (b && b == "false") {
          ISE(".ycs-app").setAttribute("CollapsedState", "false")
        }
      }
      console.log("SimpleOverlay")
    } else {
      ResetYCSBOXMode();
      console.log("Default")
    }
    await GM.setValue("YCSSTYLEMod_State", a)
  }
}
async function BlurycsSearchField(e) {
  if (e.type === 'keyup' && e.key.match(/enter/i)) {
    let msTIME = await GM.getValue("BlurycsSearchField_delay", 10);
    let mT = Number(msTIME);
    await sleep(mT * 1000);
    if (document.activeElement.id == "ycs-input-search") {
      document.activeElement.blur()
    }
  }
}
async function ToggleMODButton_Overlay() {
  if (!ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_Overlay")) {
    ISE(".ycs-app").style.transitionDuration = "50ms";
    ISE(".ycs-app").style.opacity = "0";
    ISE(".ycs-app").setAttribute("CollapsedState", "true");
    ISE(".ycs-app").classList.add("YCS-ModCSSByNJ1n9_Overlay");
    await sleep(70);
    ISE("#YCSBox-OverlayToggle").style.color = "rgb(145, 213, 153)";
    ISE(".ycs-app").style.top = "0";
    let CollapsedToggle = document.createElement("div");
    CollapsedToggle.setAttribute("id", "CollapseButton");
    CollapsedToggle.setAttribute("style", "cursor: pointer;width: 25px;height: 290px;position: absolute;left: -20px;top: 2px;background: #aacbe7;border-radius: 15px;opacity: 90%;");
    await ISE(".ycs-app").appendChild(CollapsedToggle);
    CollapsedToggle.addEventListener("click", function() {
      if (ISE(".ycs-app").getAttribute("CollapsedState") == "true") {
        ISE(".ycs-app").setAttribute("CollapsedState", "false");
        if (ISE(".ycs-app").offsetHeight >= 779) {
          ISE(".ycs-app").style.top = "-20px"
        } else {
          ISE(".ycs-app").style.top = "0"
        }
        document.addEventListener("keydown", Disable_Key);
        document.addEventListener("keyup", CollapseOverlay_Shortcut)
      } else if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
        document.removeEventListener("keyup", CollapseOverlay_Shortcut);
        document.removeEventListener("keydown", Disable_Key);
        ISE(".ycs-app").setAttribute("CollapsedState", "true");
        ISE(".ycs-app").style.top = "0"
      }
    });
    GM.setValue("YCSSTYLEMod_State", "Overlay");
    ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is in overlay-mode.");
    await sleep(70);
    await YCSBox_NotOverwhelmHeight();
    window.addEventListener("resize", YCSBox_NotOverwhelmHeight);
    let Elem_Searchfield = document.getElementById("ycs-input-search");
    Elem_Searchfield.addEventListener("search", CheckSizeResize);
    ISE("#ycs_btn_search").addEventListener("click", CheckSizeResize);
    ISE(".ycs-btn-panel.ycs_noselect").addEventListener("click", CheckSizeResize);
    ISE(".ycs-app").style.opacity = "";
    ISE(".ycs-app").style.transitionDuration = ""
  } else if (ISE(".ycs-app").classList.contains("YCS-ModCSSByNJ1n9_Overlay")) {
    if (ISE(".ycs-app").getAttribute("CollapsedState") == "false") {
      document.removeEventListener("keyup", CollapseOverlay_Shortcut);
      document.removeEventListener("keydown", Disable_Key)
    }
    ISE(".ycs-app").classList.remove("YCS-ModCSSByNJ1n9_Overlay");
    ISE("#CollapseButton").remove();
    ISE("#YCSBox-OverlayToggle").style.color = "rgb(229, 92, 92)";
    ISE(".ycs-app").style.top = "";
    if (ISE(".ycs-app").getAttribute("style").length == 0) {
      ISE(".ycs-app").removeAttribute("style")
    }
    ISE(".ycs-app").removeAttribute("CollapsedState");
    GM.setValue("YCSSTYLEMod_State", null);
    ISE("#YCSBox-OverlayToggle").setAttribute("title", "YCS-Box is normal mode.");
    window.removeEventListener("resize", YCSBox_NotOverwhelmHeight);
    let Elem_Searchfield = document.getElementById("ycs-input-search");
    Elem_Searchfield.removeEventListener("search", CheckSizeResize);
    ISE("#ycs_btn_search").removeEventListener("click", CheckSizeResize);
    ISE(".ycs-btn-panel.ycs_noselect").removeEventListener("click", CheckSizeResize);
    if (ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result")) {
      ISE(".ycs-app.YCS-ModCSSByNJ1n9_Overlay .ycs-app-main #ycs-search-result").style.maxHeight = "";
      if (ISE(".ycs-app.YCS-ModCSSByNJ1n9_Overlay .ycs-app-main #ycs-search-result").style.length == 0) {
        ISE(".ycs-app.YCS-ModCSSByNJ1n9_Overlay .ycs-app-main #ycs-search-result").removeAttribute("style")
      }
    }
  }
}

function CheckSizeResize() {
  if (ISE(".ycs-app").offsetHeight >= 779) {
    ISE(".ycs-app").style.top = "-20px"
  } else {
    ISE(".ycs-app").style.top = "0"
  }
}

function CollapseOverlay_Shortcut(a) {
  if (a.which == 9) {
    a.preventDefault();
    ISE(".html5-video-player.ytp-transparent.ytp-exp-bottom-control-flexbox.ytp-larger-tap-buttons.ytp-exp-ppp-update").focus();
    ISE("#CollapseButton").click()
  }
}

function Disable_Key(a) {
  if (a.which == 9) {
    a.preventDefault();
    return
  }
}
async function WhatTextIsSearchedin_YCS() {
  let CreateCSS_TextPreviewElem = document.createElement("style");
  CreateCSS_TextPreviewElem.innerHTML = '\n#YCS_SearchTextPreview::before {\n' + '  content: attr(ContentBeforeInner);\n' + '}\n';
  document.head.appendChild(CreateCSS_TextPreviewElem);
  await waitFor(_ => function() {
    if (document.getElementById("ycs-search").children.length > 0) {
      return true
    }
    return false
  });
  var d = document.createElement("label");
  d.setAttribute("id", 'YCS_SearchTextPreview');
  if (ISE("label#YCS_TimestampMatchResult")) {
    await document.getElementById("ycs-search").children[0].insertBefore(d, ISE("label#YCS_TimestampMatchResult"))
  } else {
    await document.getElementById("ycs-search").children[0].appendChild(d)
  }

  function PreviewWhatTextSearched(e) {
    if (e.key && e.key.match(/enter/i)) {
      var a = document.getElementById("YCS_SearchTextPreview");
      var b = document.getElementsByClassName("ycs-searchbox")[0].children[0].value;
      if (b.length == 0) {
        a.setAttribute("ContentBeforeInner", "Cleared! The previous result: ");
        if (ISE("#YCS_SearchTextPreview").getElementsByTagName("br").length == 0) {
          var c = ISE("#YCS_SearchTextPreview").innerHTML;
          if (c.replaceAll("\n", "").length == 0) {
            document.getElementById("YCS_SearchTextPreview").innerHTML = "\n<br>" + "[NONE XD]"
          } else {
            document.getElementById("YCS_SearchTextPreview").innerHTML = "\n<br>" + c
          }
        }
      } else {
        a.innerHTML = b;
        a.setAttribute("ContentBeforeInner", "Searching: ")
      }
    }
  }
  await waitFor(_ => document.getElementById("ycs-input-search"));
  document.getElementById("ycs-input-search").addEventListener("keyup", PreviewWhatTextSearched);
  ISE("#ycs_btn_search").addEventListener("click", PreviewWhatTextSearched);
  ISE("#ycs_btn_timestamps").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Showing: ");
    Get_TextPreviewElem.innerHTML = "[Comments, Replies, Chats with Timestamps]"
  });
  ISE("#ycs_btn_author").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Showing: ");
    Get_TextPreviewElem.innerHTML = "[Comments, Replies, Chats from the Author]"
  });
  ISE("#ycs_btn_likes").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Showing: ");
    Get_TextPreviewElem.innerHTML = "[Comments, Replies, Chats sorted by likes amount(Largest to Smallest)]"
  });
  ISE("#ycs_btn_replied_comments").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Showing: ");
    Get_TextPreviewElem.innerHTML = "[Comments, Replies, Chats sorted by replies amount(Largest to Smallest)]"
  });
  ISE("#ycs_btn_members").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Showing: ");
    Get_TextPreviewElem.innerHTML = "[Comments, Replies, Chats from channel members]"
  });
  ISE("#ycs_btn_donated").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Showing: ");
    Get_TextPreviewElem.innerHTML = "[Chats from users who have donated]"
  });
  ISE("#ycs_btn_sort_first").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Showing: ");
    Get_TextPreviewElem.innerHTML = "[All Comments and Chats sorted by date]"
  });
  ISE("#ycs_btn_random").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Showing: ");
    Get_TextPreviewElem.innerHTML = "[A random Comment]"
  });
  ISE("#ycs_btn_clear").addEventListener("click", function() {
    let Get_TextPreviewElem = document.getElementById("YCS_SearchTextPreview");
    Get_TextPreviewElem.setAttribute("ContentBeforeInner", "Cleared! The previous result: ");
    if (ISE("#YCS_SearchTextPreview").getElementsByTagName("br").length == 0) {
      var a = ISE("#YCS_SearchTextPreview").innerHTML;
      if (a.replaceAll("\n", "").length == 0) {
        document.getElementById("YCS_SearchTextPreview").innerHTML = "\n<br>" + "[NONE XD]"
      } else {
        document.getElementById("YCS_SearchTextPreview").innerHTML = "\n<br>" + a
      }
    }
  });
  return
}
async function YCSBox_NotOverwhelmHeight(a) {
  if (ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result")) {
    await sleep(100);
    var b = (96 / 100) * ISE(".ycs-app").offsetHeight - 10;
    if (a != true && b < window.innerHeight && ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").style.length != 0) {
      ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").style.maxHeight = "";
      YCSBox_NotOverwhelmHeight(true);
      return
    } else if (b < window.innerHeight && a == true) {
      console.log("YAY! The height is adjusted as needed now!");
      return
    } else if (b > window.innerHeight) {
      let Get_MaxHeightElem = Number(ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").style.maxHeight.replace(/[a-z]/g, ""));
      if (Get_MaxHeightElem > 700) {
        ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").style.maxHeight = "";
        YCSBox_NotOverwhelmHeight(true);
        return
      }
      let ChangeMaxHeight = (ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").offsetHeight - 10);
      if (Math.sign(ChangeMaxHeight) == -1) {
        ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").style.maxHeight = "";
        YCSBox_NotOverwhelmHeight(true);
        return
      }
      let ConvertToPixelsHeight = ChangeMaxHeight + "px";
      ISE(".ycs-app[CollapsedState] .ycs-app-main #ycs-search-result").style.setProperty("max-height", ConvertToPixelsHeight, "important");
      YCSBox_NotOverwhelmHeight(true);
      return
    } else if (b < window.innerHeight && a != true) {
      console.log("No need to adjust the height, it is perfect the way it is!~");
      return
    }
  }
  return
}
