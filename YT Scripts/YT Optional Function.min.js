// ==UserScript==
// @name           YT Optional Function [MINIFIED/COMPILED]
// @namespace      MinifyCompiled__YT_scripts
// @version        1
// @homepageURL    https://github.com/NJeyyy/About-Me/tree/Userscripts/YT%20Scripts
// @supportURL     https://github.com/NJeyyy/About-Me/blob/Userscripts/YT%20Scripts/YT%20Optional%20Function.log
// @author         NJ1n9
// @description    Optional YouTube function in a script😏🎸🎶🎧 [Minified version]
// @require        https://github.com/NJeyyy/About-Me/raw/dd58f08d979f095a98dfa464d8b0896cbb2528d6/Global%20Tool%20Script/Custom%20Addition%20ToolScript%5BOnly%20the%20script%20list%5D.js
// @match          https://www.youtube.com/*
// @icon           https://i.imgur.com/Xzfid2K.png
// @grant          GM.setValue
// @grant          GM.getValue
// @noframes
// ==/UserScript==

async function start_YTOptionalFunction() {
  window.location.href.match("https://www.youtube.com/watch*") && BLOCKAUTOPLAY(), await waitFor((e => "complete" == document.readyState)), await sleep(50);
  if (SidebarPARENT(), window.location.href.match("https://www.youtube.com/watch*")) {
    let e = document.createElement("style");
    e.setAttribute("class", "LoadingOverlayELEMENTS"), e.innerHTML = 'div[name="LoadingOverlay"] {\n background-color: black;\n top: 0px;\n left: 0px;\n width: 100vw;\n height: 100vh;\n z-index: 99999;\n opacity: 80%;\n position: fixed;\n cursor: url(https://i.ibb.co/qgPfw89/m5p-FZPd-RESIZED.png), auto;\n user-select: none;\n pointer-events: none;\n}\nimg[name="LoadingIcon"] {\n filter: invert(86%) sepia(1%) saturate(1660%) hue-rotate(115deg) brightness(107%) contrast(113%);\n height: auto;\n width: 10vw;\n position: absolute;\n top: 50vh;\n left: 50vw;\n transform: translate(-50%,-50%);\n pointer-events: auto;\n}\n', document.head.appendChild(e);
    let t = document.createElement("div");
    t.setAttribute("class", "LoadingOverlayELEMENTS"), t.setAttribute("name", "LoadingOverlay"), t.innerHTML = '<img name="LoadingIcon" title="Right click here to remove this overlay!" src="https://i0.wp.com/mdhsociety.com/wp-content/uploads/2017/11/throbber.gif">', await document.body.appendChild(t), document.getElementsByName("LoadingIcon")[0].setAttribute("draggable", !1), document.getElementsByName("LoadingIcon")[0].addEventListener("contextmenu", (e => {
      e.preventDefault(), 1 == confirm("Do you want to remove the ['𝘌𝘭𝘦𝘮𝘦𝘯𝘵.𝙻𝚘𝚊𝚍𝚒𝚗𝚐𝙾𝚟𝚎𝚛𝚕𝚊𝚢𝙴𝙻𝙴𝙼𝙴𝙽𝚃𝚂'].\nTo ignore the loading and just do whatever U want?") && (document.getElementsByClassName("LoadingOverlayELEMENTS")[1].remove(), document.getElementsByClassName("LoadingOverlayELEMENTS")[0].remove())
    })), BLOCKAUTOPLAY()
  }
  await LittleLoadingIcon();
  setInterval(Theme_BasedTime, 36e5);
  if (await sleep(70), window.location.href.match("https://www.youtube.com/watch*") && BLOCKAUTOPLAY(), await Theme_BasedTime(), window.location.href.match("https://www.youtube.com/watch*") && BLOCKAUTOPLAY(), ToggleTHEMEBTN(), window.location.href.match("https://www.youtube.com/watch*") && BLOCKAUTOPLAY(), await Startonlyonvideopage(), window.location.href.match("https://www.youtube.com/watch*") && BLOCKAUTOPLAY(), await sleep(100), window.location.href.match("https://www.youtube.com/watch*")) {
    await sleep(180), BLOCKAUTOPLAY();
    let e = "false";
    if ("ask" == e) {
      1 == confirm("Go to [0:00]? ") && document.getElementById("movie_player").seekTo(0, !0)
    } else "true" == e && document.getElementById("movie_player").seekTo(0, !0)
  }
  await sleep(70), await waitFor((e => "visible" == document.visibilityState || "visible" == document.webkitVisibilityState)), await sleep(90), BLOCKAUTOPLAY(), document.addEventListener("click", ClearYTSearchBox_Byfewact), document.getElementsByClassName("LoadingOverlayELEMENTS").length && (document.getElementsByClassName("LoadingOverlayELEMENTS")[1].remove(), document.getElementsByClassName("LoadingOverlayELEMENTS")[0].remove()), document.getElementById("LutleLoadingSpinIcon") && document.getElementById("LutleLoadingSpinIcon").remove(), document.getElementsByClassName("LoadingOverlayELEMENTS").length && (document.getElementsByClassName("LoadingOverlayELEMENTS")[1].remove(), document.getElementsByClassName("LoadingOverlayELEMENTS")[0].remove()), document.getElementById("LutleLoadingSpinIcon") && document.getElementById("LutleLoadingSpinIcon").remove(), console.log("YT Optional Function"), window.location.href.match("https://www.youtube.com/watch*") && BLOCKAUTOPLAY(), ISE("ytd-app").focus()
}
async function Startonlyonvideopage() {
  await sleep(50);
  var e = new RegExp("https://www.youtube.com/watch*"),
    t = await window.location.href;
  "true" == sessionStorage.getItem("AlreadyRUN_YTOptionalFunction1") && (document.removeEventListener("keyup", YTAds_Shortcut, !1), await sleep(90), sessionStorage.setItem("AlreadyRUN_YTOptionalFunction1", !1)), t.match(e) ? (await document.addEventListener("keyup", YTAds_Shortcut, !1), await document.addEventListener("keypress", EnterCommentKEYFunc), sessionStorage.setItem("AlreadyRUN_YTOptionalFunction1", !0), console.log("DONE! on the script that's only run in video page!")) : console.log("This script is not working here =w="), await sleep(50)
}
async function YTAds_Shortcut(e) {
  var t = document.getElementsByClassName("ytp-ad-skip-button ytp-button");
  if (192 == e.which) {
    var n = document.activeElement;
    return n instanceof HTMLTextAreaElement || n instanceof HTMLInputElement || 1 == n.isContentEditable ? void 0 : 1 == t.length ? (t[0].click(), console.log("Skippable ads skipped."), void await sleep(50)) : ISE(".ytp-ad-text.ytp-ad-preview-text") ? (document.querySelector("video.video-stream").pause(), await sleep(70), alert("It's not skippable:P"), document.querySelector("video.video-stream").play(), void await sleep(50)) : ISE(".ytp-ad-text-overlay") ? (ISE(".ytp-ad-overlay-close-button").click(), console.log("Overlay ads is closed."), void await sleep(50)) : void alert("THERE'S NO ADS HERE\nSO CAN YA JUST STOP")
  }
}
async function Theme_BasedTime() {
  var e = new Date;
  var t = ("0" + e.getHours()).slice(-2) + ":" + ("0" + e.getMinutes()).slice(-2),
    n = await GM.getValue("theme_SELECTION1", "Dark"),
    a = await GM.getValue("theme_SELECTION2", "Light");
  if (t >= "17:00" || t <= "07:59") {
    var o = n;
    console.log(n, "Theme")
  } else if (t >= "08:00" && t <= "16:59") {
    o = a;
    console.log(a, "Theme")
  }
  var i = o,
    s = document.getElementsByTagName("html")[0];
  i.match(/Dark/i) ? "true" != s.getAttribute("dark") && (s.setAttribute("dark", "true"), 0 != document.getElementsByClassName("ycs-app").length && document.getElementsByClassName("ycs-app")[0].innerHTML.reload, console.log("Dark Theme applied."), SE(".ToggleTHEME_NJ1n9") && await CheckEditToggleThemeBTN()) : i.match(/Light/i) && "true" == s.getAttribute("dark") && (s.removeAttribute("dark"), console.log("Light Theme applied."), SE(".ToggleTHEME_NJ1n9") && await CheckEditToggleThemeBTN()), await sleep(50), console.log("Theme Switcher thingy is done!")
}
async function RestorePreferredOption_4YT(e) {
  var t, n, a = 720,
    o = null;
  if (localStorage.getItem("yt-player-quality") ? (t = JSON.parse(localStorage.getItem("yt-player-quality")), n = JSON.parse(t.data)) : (t = {}, n = {}), a) {
    let e = a;
    n.quality = e
  }
  if (o) {
    let e = o;
    n.previousQuality = e
  }
  t.data = JSON.stringify(n), JSON.stringify(t) != localStorage.getItem("yt-player-quality") && localStorage.setItem("yt-player-quality", JSON.stringify(t)), await sleep(130)
}
async function ToggleTHEMEBTN() {
  await sleep(70);
  var e = document.createElement("div");
  e.setAttribute("class", "ToggleTHEME_NJ1n9 fas"), document.getElementById("start").appendChild(e), await waitFor((e => document.getElementById("FontAwesome5script")));
  var t = document.createElement("style");
  t.setAttribute("class", "ToggleTHEME_NJ1n9");
  t.innerHTML = 'div.ToggleTHEME_NJ1n9 {\n font-size: 24px;\n user-select: none;\n position: relative;\n bottom: 5px;\n}\ndiv.ToggleTHEME_NJ1n9[THEME="dark"] {\n color: rgb(50,50,50);\n text-shadow: -1px 1px 0 #FFF,\n 1px 1px 0 #FFF,\n 1px -1px 0 #FFF,\n -1px -1px 0 #FFF;\n}\ndiv.ToggleTHEME_NJ1n9[THEME="dark"]:hover {\n color: rgb(80,80,80);\n}\ndiv.ToggleTHEME_NJ1n9[THEME="dark"]:active {\n color: rgb(90,90,90);\n text-shadow: -1px 1px 0 #EEE,\n 1px 1px 0 #EEE,\n 1px -1px 0 #EEE,\n -1px -1px 0 #EEE;\n}\ndiv.ToggleTHEME_NJ1n9[THEME="light"] {\n color: rgb(240,240,240);\n text-shadow: -1px 1px 0 #000,\n 1px 1px 0 #000,\n 1px -1px 0 #000,\n -1px -1px 0 #000;\n}\ndiv.ToggleTHEME_NJ1n9[THEME="light"]:hover {\n color: rgb(230,230,230);\n}\ndiv.ToggleTHEME_NJ1n9[THEME="light"]:active {\n color: rgb(210,210,210);\n text-shadow: -1px 1px 0 #333,\n 1px 1px 0 #333,\n 1px -1px 0 #333,\n -1px -1px 0 #333;\n}\n', await document.head.appendChild(t), await sleep(50), CheckEditToggleThemeBTN(), await sleep(50)
}
async function CheckEditToggleThemeBTN() {
  var e = document.getElementsByTagName("html")[0];
  if ("true" == e.getAttribute("dark"))(t = document.getElementsByClassName("ToggleTHEME_NJ1n9")[1]).classList.contains("fa-sun") ? t.classList.replace("fa-sun", "fa-moon") : t.classList.add("fa-moon"), t.setAttribute("THEME", "dark"), t.title = "Current Theme is Dark.\nClick to switch to Light Theme", t.addEventListener("click", (function e() {
    let t = document.getElementsByClassName("ToggleTHEME_NJ1n9")[1];
    document.getElementsByTagName("html")[0].removeAttribute("dark"), CheckEditToggleThemeBTN(), t.removeEventListener("click", e)
  }));
  else if ("true" != e.getAttribute("dark")) {
    var t;
    (t = document.getElementsByClassName("ToggleTHEME_NJ1n9")[1]).classList.contains("fa-moon") ? t.classList.replace("fa-moon", "fa-sun") : t.classList.add("fa-sun"), t.setAttribute("THEME", "light"), t.title = "Current Theme is Light.\nClick to switch to Dark Theme", t.addEventListener("click", (function e() {
      let t = document.getElementsByClassName("ToggleTHEME_NJ1n9")[1];
      document.getElementsByTagName("html")[0].setAttribute("dark", "true"), CheckEditToggleThemeBTN(), t.removeEventListener("click", e)
    }))
  }
  console.log("Toggle Theme Button has been added."), await sleep(50)
}
async function BLOCKAUTOPLAY() {
  document.getElementsByClassName("video-stream").length && document.querySelector("video.video-stream").pause(), await sleep(30)
}
async function EnterCommentKEYFunc(e) {
  let t = 13 == e.which;
  if (!e.shiftKey && t) {
    let t = document.activeElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement,
      i = t.id.toUpperCase(),
      s = t.tagName.toUpperCase(),
      r = "commentbox".toUpperCase();
    if (s == "ytd-commentbox".toUpperCase() && i == r) {
      e.preventDefault();
      for (var n = 0; !SE("ytd-commentbox#commentbox")[n].contains(document.activeElement);) n++;
      await sleep(80);
      var a = SE("ytd-commentbox#commentbox")[n];
      if (a.querySelector("#submit-button"), a.querySelector("#submit-button").hasAttribute("disabled")) {
        var o = await GM.getValue("SubmitCommentEvent_ErrorCounter");
        if (Number.isInteger(o / 7)) {
          o++, GM.setValue("SubmitCommentEvent_ErrorCounter", o);
          let e = ["YouTube Userscript", "Steve", "ME", "You", "YT Optional Function's script", "from a YT userscript", "NJ1n9 the great creator"],
            t = e[Math.floor(Math.random() * e.length)];
          return void alert("Just wanted to let y'know,\nYou cannot submit it without any text or without any changes in it.\n\n-Love, " + t + ".")
        }
        return console.error("%cCannot comment/reply nothing, make sure there's a text there. PLEASE\nAlso if you're editing a comment, you cannot save edited comment that doesn't have changes too\n\nTY. -Love, some random YT Users", "font-weight: bold;color: #b90000;"), o++, GM.setValue("SubmitCommentEvent_ErrorCounter", o), void await sleep(50)
      }
      return a.querySelector("#submit-button").click(), void await sleep(100)
    }
  } else await sleep(50)
}
async function gotoCommentIT(e) {
  await sleep(300);
  let t = 67 == e.which;
  e.altKey && t && (7 == document.getElementsByClassName("style-scope ytd-comment-simplebox-renderer").length && document.activeElement !== document.getElementsByClassName("yt-formatted-string")[9] ? document.getElementsByClassName("style-scope ytd-comment-simplebox-renderer")[1].click() : document.activeElement == document.getElementsByClassName("yt-formatted-string")[9] && (document.activeElement.blur(), window.scrollTo(0, 0)))
}
async function LittleLoadingIcon() {
  await sleep(70), await waitFor((e => document.querySelector("#masthead #container #end")));
  let e = document.createElement("div");
  e.setAttribute("style", "position: relative;"), e.setAttribute("id", "LutleLoadingSpinIcon"), e.innerHTML = '\n<div style="transform: scale(0.7);position: absolute;top: -17px;left: -57px;">\n<div class="loadingio-spinner-eclipse-vt0i90fkm1a">\n\t<div class="ldio-38lnbzayuu6">\n\t\t<div></div>\n</div></div>\n\t<style type="text/css">\n @keyframes ldio-38lnbzayuu6 {\n \t0% { transform: rotate(0deg) }\n 50% { transform: rotate(180deg) }\n \t100% { transform: rotate(360deg) }\n }\n .ldio-38lnbzayuu6 div {\n position: absolute;\n animation: ldio-38lnbzayuu6 2.4499999999999997s linear infinite;\n width: 50px;\n height: 50px;\n top: 25px;\n left: 25px;\n border-radius: 50%;\n box-shadow: 0 3.8000000000000003px 0 0 #ff3333;\n transform-origin: 25px 26.9px;\n }\n .loadingio-spinner-eclipse-vt0i90fkm1a {\n width: 71px;\n height: 71px;\n display: inline-block;\n overflow: hidden;\n background: none;\n }\n .ldio-38lnbzayuu6 {\n width: 100%;\n height: 100%;\n position: relative;\n transform: translateZ(0) scale(0.71);\n backface-visibility: hidden;\n transform-origin: 0 0; /* see note above */\n }\n .ldio-38lnbzayuu6 div {\n box-sizing: content-box;\n }\n/* generated by https://loading.io/ */\n</style></div>\n', await document.querySelector("#masthead #container #end").children[1].insertBefore(e, document.querySelector("#masthead #container #end").children[1].childNodes[0]), await sleep(50)
}

function SidebarPARENT() {
  window.addEventListener("locationchange", Sidebar_StoreSTATE), window.addEventListener("resize", Sidebar_StoreSTATE), ISE("yt-icon-button#guide-button.style-scope.ytd-masthead").addEventListener("click", OpenCloseSTATE_Sidebar)
}
async function OpenCloseSTATE_Sidebar() {
  await sleep(100), ISE("tp-yt-app-drawer#guide[role='navigation'][persistent].style-scope.ytd-app[opened]") && ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation'][guide-persistent-and-visible][hidden][disable-upgrade]:not(mini-guide-visible)") ? sessionStorage.setItem("YTSidebarSTATE", "Opened") : ISE("tp-yt-app-drawer#guide[role='navigation'][persistent].style-scope.ytd-app:not([opened])") && ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation'][mini-guide-visible]:not([disable-upgrade], [hidden], [guide-persistent-and-visible])") && sessionStorage.setItem("YTSidebarSTATE", "Closed")
}

function Sidebar_StoreSTATE() {
  null != sessionStorage.getItem("YTSidebarSTATE") && (sessionStorage.getItem("YTSidebarSTATE").match(/Closed/i) ? (ISE("tp-yt-app-drawer#guide[role='navigation'][persistent].style-scope.ytd-app[opened]") && ISE("tp-yt-app-drawer#guide[role='navigation'][persistent].style-scope.ytd-app").removeAttribute("opened"), ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation'][guide-persistent-and-visible][hidden][disable-upgrade]:not(mini-guide-visible)") && (ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation']").setAttribute("mini-guide-visible", ""), ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation']").removeAttribute("guide-persistent-and-visible"), ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation']").removeAttribute("hidden"), ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation']").removeAttribute("disable-upgrade"))) : sessionStorage.getItem("YTSidebarSTATE").match(/Opened/i) && (ISE("tp-yt-app-drawer#guide[role='navigation'][persistent].style-scope.ytd-app:not([opened])") && ISE("tp-yt-app-drawer#guide[role='navigation'][persistent].style-scope.ytd-app:not([opened])").setAttribute("opened", ""), ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation'][mini-guide-visible]:not([disable-upgrade], [hidden], [guide-persistent-and-visible])") && (ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation']").setAttribute("guide-persistent-and-visible", ""), ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation']").setAttribute("hidden", ""), ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation']").setAttribute("disable-upgrade", ""), ISE("ytd-mini-guide-renderer.style-scope.ytd-app[role='navigation']").removeAttribute("mini-guide-visible"))))
}

function MatchObjectKeyValue_inArray(e, t, n) {
  for (var a = new RegExp(n, "i"), o = null, i = 0; i < e.length; i++)
    if (e[i][t] && e[i][t].match(a)) {
      o = e[i][t].match(a);
      break
    } return !!o
}
async function ClearYTSearchBox_Byfewact(e) {
  if (0 != ISE("#search-input.ytd-searchbox-spt input").value.length) {
    var t = e.path;
    let n = "YTD-VIDEO-RENDERER",
      a = "YTD-CHANNEL-RENDERER",
      o = await MatchObjectKeyValue_inArray(t, "tagName", n),
      i = await MatchObjectKeyValue_inArray(t, "tagName", a),
      s = await MatchObjectKeyValue_inArray(t, "tagName", "input");
    o || i ? ISE("#search-input.ytd-searchbox-spt input").value = "" : s && (ISE("#search-input.ytd-searchbox-spt input").focus(), ISE("#search-input.ytd-searchbox-spt input").select())
  }
}
sessionStorage.setItem("AlreadyRUN_YTOptionalFunction1", !1), GM.setValue("SubmitCommentEvent_ErrorCounter", 0), start_YTOptionalFunction(), window.addEventListener("locationchange", (async function() {
  BLOCKAUTOPLAY(), await sleep(150);
  if (BLOCKAUTOPLAY(), window.location.href.match("https://www.youtube.com/watch*")) {
    let e = document.createElement("style");
    e.setAttribute("class", "LoadingOverlayELEMENTS"), e.innerHTML = 'div[name="LoadingOverlay"] {\n background-color: black;\n top: 0px;\n left: 0px;\n width: 100vw;\n height: 100vh;\n z-index: 99999;\n opacity: 70%;\n position: fixed;\n cursor: url(https://i.ibb.co/qgPfw89/m5p-FZPd-RESIZED.png), auto;\n user-select: none;\n pointer-events: none;\n}\nimg[name="LoadingIcon"] {\n filter: invert(86%) sepia(1%) saturate(1660%) hue-rotate(115deg) brightness(107%) contrast(113%);\n height: auto;\n width: 10vw;\n position: absolute;\n top: 50vh;\n left: 50vw;\n transform: translate(-50%,-50%);\n pointer-events: auto;\n}\n', await document.head.appendChild(e);
    let t = document.createElement("div");
    t.setAttribute("class", "LoadingOverlayELEMENTS"), t.setAttribute("name", "LoadingOverlay"), t.innerHTML = '<img name="LoadingIcon" title="Right click here to remove this overlay!" src="https://i0.wp.com/mdhsociety.com/wp-content/uploads/2017/11/throbber.gif">', await document.body.appendChild(t), await document.getElementsByName("LoadingIcon")[0].setAttribute("draggable", !1), await document.getElementsByName("LoadingIcon")[0].addEventListener("contextmenu", (e => {
      e.preventDefault(), 1 == confirm("Do you want to remove the ['𝘌𝘭𝘦𝘮𝘦𝘯𝘵.𝙻𝚘𝚊𝚍𝚒𝚗𝚐𝙾𝚟𝚎𝚛𝚕𝚊𝚢𝙴𝙻𝙴𝙼𝙴𝙽𝚃𝚂'].\nTo ignore the loading and just do whatever U want?") && (document.getElementsByClassName("LoadingOverlayELEMENTS")[1].remove(), document.getElementsByClassName("LoadingOverlayELEMENTS")[0].remove())
    })), await LittleLoadingIcon(), BLOCKAUTOPLAY()
  }
  if (await sleep(50), await Startonlyonvideopage(), BLOCKAUTOPLAY(), await Theme_BasedTime(), BLOCKAUTOPLAY(), window.location.href.match("https://www.youtube.com/watch*")) {
    await sleep(10);
    let e = "false";
    if ("ask" == e) {
      1 == confirm("Go to [0:00]? ") && document.getElementById("movie_player").seekTo(0, !0)
    } else "true" == e && document.getElementById("movie_player").seekTo(0, !0)
  }
  BLOCKAUTOPLAY(), await sleep(50), BLOCKAUTOPLAY(), await waitFor((e => "visible" == document.visibilityState || "visible" == document.webkitVisibilityState)), BLOCKAUTOPLAY(), await sleep(70), document.getElementsByClassName("LoadingOverlayELEMENTS").length && (document.getElementsByClassName("LoadingOverlayELEMENTS")[1].remove(), document.getElementsByClassName("LoadingOverlayELEMENTS")[0].remove()), document.getElementById("LutleLoadingSpinIcon") && document.getElementById("LutleLoadingSpinIcon").remove(), BLOCKAUTOPLAY(), document.getElementById("LutleLoadingSpinIcon") && document.getElementById("LutleLoadingSpinIcon").remove(), document.getElementsByClassName("LoadingOverlayELEMENTS").length && (document.getElementsByClassName("LoadingOverlayELEMENTS")[1].remove(), document.getElementsByClassName("LoadingOverlayELEMENTS")[0].remove()), console.log("YT Optional Function"), BLOCKAUTOPLAY(), ISE("ytd-app").focus(), await sleep(50)
}));
