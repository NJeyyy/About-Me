// ==UserScript==
// @name             Simple Tools [MINIFIED/COMPILED]
// @namespace        MinifyCompiled__GlobalFunction_SimpleTool
// @match            *://*/*
// @exclude-match    https://codepen.io/*
// @grant            none
// @version          1
// @author           NJ1n9
// @description      Add overlay-button to the page to disable user selection
// @icon             https://i.ibb.co/v1NZVnV/Simple-Tools-Min-Userscript-Icon.png
// @require          https://github.com/NJeyyy/About-Me/raw/dd58f08d979f095a98dfa464d8b0896cbb2528d6/Global%20Tool%20Script/Custom%20Addition%20ToolScript%5BOnly%20the%20script%20list%5D.js
// @resource         SimToolsCSS https://github.com/NJeyyy/About-Me/raw/bf8a6daf8447e169929be623fae80076dee703d4/Global%20Tool%20Script/Simple%20Tools%5BUSERSCRIPT%5D.txt
// @grant            GM.setValue
// @grant            GM.getValue
// @grant            GM_getResourceText
// @noframes
// ==/UserScript==

RunFUNCTIONTHNG() async function RunFUNCTIONTHNG() {
  await CreateSimpleToolCont() await sleep(10 * 1000);
  CheckSimpleTool_usable()
}
async function CreateSimpleToolCont() {
  let ElemcrtCSSinner = GM_getResourceText("SimToolsCSS");
  let ElemcrtCSS = document.createElement("style");
  ElemcrtCSS.setAttribute("id", "SimTool-CSS");
  ElemcrtCSS.innerHTML = ElemcrtCSSinner;
  document.head.appendChild(ElemcrtCSS);
  let ElemcrtCONT_bottomPX = await GM.getValue("YPosition_bottom", "10px");
  let ElemcrtCONT = document.createElement("div");
  ElemcrtCONT.setAttribute("id", "SimTool-Overlay");
  ElemcrtCONT.setAttribute("SlideOverlay", "false");
  let ElemcrtCONTStyleattr = "width:20px; bottom:" + ElemcrtCONT_bottomPX + ";";
  ElemcrtCONT.setAttribute("style", ElemcrtCONTStyleattr);
  await document.body.appendChild(ElemcrtCONT);
  document.getElementById("SimTool-Overlay").addEventListener("contextmenu", NOCLICKHERE);
  let ElementcrtGRIP = document.createElement("div");
  ElementcrtGRIP.setAttribute("id", "SimTool-Overlay-Grip");
  document.getElementById("SimTool-Overlay").appendChild(ElementcrtGRIP);
  ISE("#SimTool-Overlay-Grip").addEventListener("contextmenu", SimToolCollEx);
  async function SimToolCollEx(e) {
    e.preventDefault();
    if (document.getElementById("SimTool-Overlay").getAttribute("SlideOverlay") == "false") {
      document.getElementById("SimTool-Overlay").setAttribute("SlideOverlay", "true");
      document.addEventListener("click", SlideOverlayHide);
      document.getElementById("SimTool-Overlay").addEventListener("click", NOCLICKHERE)
    } else if (document.getElementById("SimTool-Overlay").getAttribute("SlideOverlay") == "true") {
      document.getElementById("SimTool-Overlay").setAttribute("SlideOverlay", "false");
      document.removeEventListener("click", SlideOverlayHide);
      document.getElementById("SimTool-Overlay").removeEventListener("click", NOCLICKHERE)
    }
  }
  let SlideSideState = await GM.getValue("SlideSideSTATE", "left");
  if (SlideSideState == "right") {
    document.getElementById("SimTool-Overlay").setAttribute("SlideSide", "right")
  } else if (SlideSideState == "left") {
    document.getElementById("SimTool-Overlay").setAttribute("SlideSide", "left")
  }

  function SlideOverlayHide() {
    if (document.getElementById("SimTool-Overlay").getAttribute("SlideOverlay") == "true") {
      document.getElementById("SimTool-Overlay").setAttribute("SlideOverlay", "false");
      document.getElementById("SimTool-Overlay").removeEventListener("click", NOCLICKHERE)
    }
  }

  function NOCLICKHERE(e) {
    e.preventDefault();
    e.stopPropagation();
    return false
  }
  dragElement(document.getElementById("SimTool-Overlay"), ISE("#SimTool-Overlay-Grip"));

  function dragElement(d, f) {
    var g = 200;
    var h = 200;
    if (document.getElementById(d.id + "header")) {
      document.getElementById(d.id + "header").onmousedown = dragMouseDown
    } else if (f) {
      f.onmousedown = dragMouseDown
    } else {
      d.onmousedown = dragMouseDown
    }

    function dragMouseDown(e) {
      e = e || window.event;
      e.preventDefault();
      if (e.which == 1) {
        document.onmouseup = closeDragElement;
        d.style.position = "fixed";
        d.style.transform = "none";
        document.onmousemove = elementDrag
      }
    }

    function elementDrag(e) {
      e = e || window.event;
      e.preventDefault();
      var a = d.offsetWidth + 5;
      var b = d.offsetHeight - 20;
      var c = window.innerHeight - e.clientY - b;
      if (d.getAttribute("SlideSide") == "right") {
        let pos3r = window.innerWidth - e.clientX - (a + 15);
        d.style.right = pos3r + "px"
      } else if (d.getAttribute("SlideSide") == "left") {
        let pos3l = e.clientX - a;
        d.style.left = pos3l + "px"
      }
      d.style.bottom = c + "px"
    }

    function closeDragElement(e) {
      document.onmouseup = null;
      document.onmousemove = null;
      if (e.clientX >= window.innerWidth - g) {
        d.setAttribute("SlideSide", "right");
        GM.setValue("SlideSideSTATE", "right")
      } else if (e.clientX <= h) {
        d.setAttribute("SlideSide", "left");
        GM.setValue("SlideSideSTATE", "left")
      }
      d.style.left = "";
      d.style.right = "";
      d.style.position = "fixed";
      d.style.transform = "";
      GM.setValue("YPosition_bottom", d.style.bottom)
    }
  }
  console.log("SimpleTool-Container element is created!");
  return
}

function CheckSimpleTool_usable() {
  if (document.getElementById("SimTool-Overlay").children.length == 0) {
    document.getElementById("SimTool-Overlay").remove();
    document.getElementById("SimTool-CSS").remove();
    console.warn("ToolBox for simple tool is removedm since there's no tools at all in it.")
  }
  return
}
async function UserselectionFUNC() {
  await waitFor(_ => document.getElementById("SimTool-Overlay"));
  await waitFor(_ => document.getElementById("FontAwesome5script"));
  if (document.getElementById("SimTool-Overlay").hasAttribute("style")) {
    document.getElementById("SimTool-Overlay").style.width = ""
  }
  let createCSS_ElementToggleBTN_DUS = document.createElement("style");
  createCSS_ElementToggleBTN_DUS.setAttribute("id", "CSS_DisableUserSelection");
  createCSS_ElementToggleBTN_DUS.innerHTML = 'div.DisableUserSelection {\n' + ' background: #f1f1f1;\n' + ' font-size: 30px;\n' + ' border-radius: 50%;\n' + ' opacity: 85%;\n' + '}\n' + '\n' + 'div.DisableUserSelection[ToggleStatus="ON"] {\n' + ' color: red;\n' + ' cursor: url(https://cdn.custom-cursor.com/db/cursor/32/Rock_Hand_cursor.png), auto;\n' + '}\n' + 'div.DisableUserSelection[ToggleStatus="ON"]:not(:hover) {\n' + ' opacity: 65%;\n' + '}\n' + '\n' + 'div.DisableUserSelection[ToggleStatus="OFF"] {\n' + ' color: green;\n' + ' cursor: alias;\n' + '}\n' + 'div.DisableUserSelection[ToggleStatus="OFF"]:not(:hover, :active) {\n' + ' opacity: 20%;\n' + '}\n';
  await document.head.appendChild(createCSS_ElementToggleBTN_DUS) let create_ElementToggleBTN_DUS = document.createElement("div");
  create_ElementToggleBTN_DUS.setAttribute("class", "DisableUserSelection fas");
  create_ElementToggleBTN_DUS.setAttribute("Team", "SimTool-Overlay");
  await document.getElementById("SimTool-Overlay").appendChild(create_ElementToggleBTN_DUS)
  function Userselection_disabled() {
    document.querySelectorAll("div.DisableUserSelection")[0].classList.replace("fa-check-circle", "fa-times-circle") document.querySelectorAll("div.DisableUserSelection")[0].setAttribute("ToggleStatus", "ON");
    let DisableUserselection = document.createElement("style") DisableUserselection.setAttribute("class", "DisableUserSelection") DisableUserselection.innerHTML = "html {\n" + "user-select: none;\n" + "}\n" + "\n" + "input, textarea {\n" + " user-select: text;\n" + "}\n";
    document.head.appendChild(DisableUserselection) document.querySelectorAll("div.DisableUserSelection")[0].removeEventListener("click", Userselection_disabled) document.querySelectorAll("div.DisableUserSelection")[0].addEventListener("click", Userselection_enabled) document.querySelectorAll("div.DisableUserSelection")[0].setAttribute("title", "You cannot selecting things\nSince this turned ON.")
  }

  function Userselection_enabled() {
    document.querySelectorAll("div.DisableUserSelection")[0].setAttribute("ToggleStatus", "OFF");
    document.querySelectorAll("div.DisableUserSelection")[0].classList.replace("fa-times-circle", "fa-check-circle") document.querySelectorAll("style.DisableUserSelection")[0].remove();
    document.querySelectorAll("div.DisableUserSelection")[0].removeEventListener("click", Userselection_enabled) document.querySelectorAll("div.DisableUserSelection")[0].addEventListener("click", Userselection_disabled) document.querySelectorAll("div.DisableUserSelection")[0].setAttribute("title", "You'll still be able to selecting things\nSince this turned OFF.")
  }
  var a = "OFF"
  if (a == "ON") {
    let DisableUserselection = document.createElement("style") DisableUserselection.setAttribute("class", "DisableUserSelection") DisableUserselection.innerHTML = "html {\n" + "user-select: none;\n" + "}\n" + "\n" + "input, textarea {\n" + " user-select: text;\n" + "}\n";
    document.head.appendChild(DisableUserselection) let divDsbld = document.querySelectorAll("div.DisableUserSelection")[0];
    divDsbld.setAttribute("ToggleStatus", "ON");
    divDsbld.addEventListener("click", Userselection_enabled);
    divDsbld.classList.add("fa-times-circle");
    divDsbld.setAttribute("title", "You cannot selecting things\nSince this turned ON.")
  } else if (a == "OFF") {
    let divDsbld = document.querySelectorAll("div.DisableUserSelection")[0] divDsbld.setAttribute("ToggleStatus", "OFF");
    divDsbld.addEventListener("click", Userselection_disabled);
    divDsbld.classList.add("fa-check-circle");
    divDsbld.setAttribute("title", "You'll still be able to selecting things\nSince this turned OFF.")
  }
  console.log("Toggle selection is available!");
  return
}
