function GlobalToolscript_inf(command) {
  if(command) {
    if(command.match(/help/i)) {
      console.log("Command list:\n >help -- Show Command list\n >Code_list -- Show code list of GlobalToolscript\n >Code_source -- Show URL/Link of the code source(blob) cannot be turned into raw, sadly. If you want to that, better just copy permalink from the source first");
      return;
    } else if(command.match(/Code_list/i)) {
      console.log("Code List:\n >KodeNuklir(Code, Pages, Site, Command) -- try KodeNuklir(null, null, null, \"help\") for more information about the parameter\n >pickTextColorBasedOnBgColorSimple(bgColor, lightColor, darkColor)\n >escapeRegex(string)\n >sleep(ms)\n >waitFor(conditionFunction)\n >evil(fn)\n >copyToClipboard(text)\n >^SE(ElementSelector)    ^ISE(ElementSelector)\n");
    } else if(command.match(/Code_source/i)) {
      console.log("GlobalToolscript source: https://github.com/NJeyyy/About-Me/blob/3fc986ad01ffe01775bddff1b18d25895f486662/ToolScript_Global.txt");
    } else {
      console.error("ERROR, The command is not available!");
    }
  } else if(!command) {
    console.error("there's no command!\n*try GlobalToolscript_inf(\"help\")!");
  }
  return;
}

function copyToClipboard(text) {
  const elem = document.createElement('textarea');
  elem.value = text;
  document.body.appendChild(elem);
  elem.select();
  document.execCommand('copy');
  document.body.removeChild(elem);
}

function SE(ElementSelector) {
  if(document.querySelectorAll(ElementSelector).length === 0) {
    return null;
  }
  return document.querySelectorAll(ElementSelector);
}

function ISE(ElementSelector) {
  return document.querySelector(ElementSelector);
}

function KodeNuklir(Code, Pages, Site, Command) {
  if(Command) {
    if(Command.match(/help/i)) {
      console.log("Available command:\n -Open: Open it in new tab.\n -SiteList: Show list of site that is supported.\n -CodeExplanation: It is what it said\n -ParameterExplanation\n*YEP THAT\'S IT FOR NOW..\n**Also, FYI the cases doesn\'t matter but the text is matter!");
      return;
    } else if(Command.match(/SiteList/i)) {
      console.log("Site List:\n  >nhentai\n");
      return;
    } else if(Command.match(/CodeExplanation/i)) {
      console.log("CODE NUCLEAR EXPLANED\n    Soo.. the code I\m talking about is not an actual \"NUCLEAR\". But! A code for anime/comics/porn vid that is encrypted and shared online. There's several site for it but I only find few of it.. SADLY. Nuclear code can be found like this \"ABs-324\" or only 6 number. It depends on the site that is using it.");
      return;
    } else if(Command.match(/ParameterExplanation/i)) {
      console.log("^Code(required): The nuclear code, ITS OBVIOUS WDYM. Also THIS must BE DEFINED this was the purpose of this function..\n^Pages(Optional): It is optional, Just describe which page are you in if this was a comic and IF available\n^Site: Not must be defined, but better be but yet not really that important if your default is nhentai.net, but if it\'t not then it is required, yes it is the site you\'re using the code for\n^Command: Just some extras for this, enter \"help\" in this parameter for the code list and more information!");
      return;
    }
  }
  var cmdest = null;
  var URLz = null;
  if(!Site) {
    URLz = "https://nhentai.net/g/";
  } else if(Site.match(/nhentai/i)) {
    URLz = "https://nhentai.net/g/";
  }
  URLz += Code;
  if(Pages) {
    URLz += "/" + Pages;
  }
  if(Command && Command.match(/Open/i)) {
    window.open(URLz, '_blank');
    cmdest = true;
  }
  if(Command && cmdest == null) {
    console.error("Looks like you insert a command that\'s not exist.");
  }
  if(Code) {
    return URLz;
  } else {
    console.error("Looks like you didn't put the code huh?");
  }
}

function pickTextColorBasedOnBgColorSimple(bgColor, lightColor, darkColor) {
  var color = (bgColor.charAt(0) === '#') ? bgColor.substring(1, 7) : bgColor;
  var r = parseInt(color.substring(0, 2), 16);
  var g = parseInt(color.substring(2, 4), 16);
  var b = parseInt(color.substring(4, 6), 16);
  return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 186) ? darkColor : lightColor;
}

function escapeRegex(string) {
  return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function waitFor(conditionFunction) {
  const poll = resolve => {
    if(conditionFunction()) resolve();
    else setTimeout(_ => poll(resolve), 400);
  };
  return new Promise(poll);
}
